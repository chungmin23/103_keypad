
103_mp3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08002df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c8  200001dc  08002fd4  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002a4  08002fd4  000202a4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fc32  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000020f9  00000000  00000000  0002fe37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000573b  00000000  00000000  00031f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000748  00000000  00000000  00037670  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bb8  00000000  00000000  00037db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004da4  00000000  00000000  00038970  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002adb  00000000  00000000  0003d714  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000401ef  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e70  00000000  00000000  0004026c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bf8 	.word	0x08002bf8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	08002bf8 	.word	0x08002bf8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f892 	bl	800029c <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f001 fb2e 	bl	800181c <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000204 	.word	0x20000204
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000204 	.word	0x20000204

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfaf      	iteee	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
 800027e:	f000 000f 	andlt.w	r0, r0, #15
 8000282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfa5      	ittet	ge
 8000286:	b2d2      	uxtbge	r2, r2
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800029c:	3801      	subs	r0, #1
 800029e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002a2:	d20a      	bcs.n	80002ba <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e010 	.word	0xe000e010
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002cc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002ce:	4616      	mov	r6, r2
 80002d0:	4b65      	ldr	r3, [pc, #404]	; (8000468 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002d2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000478 <HAL_GPIO_Init+0x1b0>
 80002d6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800047c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002da:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002de:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002e0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002e8:	45a0      	cmp	r8, r4
 80002ea:	d17f      	bne.n	80003ec <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002ec:	684d      	ldr	r5, [r1, #4]
 80002ee:	2d12      	cmp	r5, #18
 80002f0:	f000 80af 	beq.w	8000452 <HAL_GPIO_Init+0x18a>
 80002f4:	f200 8088 	bhi.w	8000408 <HAL_GPIO_Init+0x140>
 80002f8:	2d02      	cmp	r5, #2
 80002fa:	f000 80a7 	beq.w	800044c <HAL_GPIO_Init+0x184>
 80002fe:	d87c      	bhi.n	80003fa <HAL_GPIO_Init+0x132>
 8000300:	2d00      	cmp	r5, #0
 8000302:	f000 808e 	beq.w	8000422 <HAL_GPIO_Init+0x15a>
 8000306:	2d01      	cmp	r5, #1
 8000308:	f000 809e 	beq.w	8000448 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800030c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000310:	2cff      	cmp	r4, #255	; 0xff
 8000312:	bf93      	iteet	ls
 8000314:	4682      	movls	sl, r0
 8000316:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800031a:	3d08      	subhi	r5, #8
 800031c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000320:	bf92      	itee	ls
 8000322:	00b5      	lslls	r5, r6, #2
 8000324:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000328:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800032a:	fa09 f805 	lsl.w	r8, r9, r5
 800032e:	ea2b 0808 	bic.w	r8, fp, r8
 8000332:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000336:	bf88      	it	hi
 8000338:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800033c:	ea48 0505 	orr.w	r5, r8, r5
 8000340:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000344:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000348:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800034c:	d04e      	beq.n	80003ec <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800034e:	4d47      	ldr	r5, [pc, #284]	; (800046c <HAL_GPIO_Init+0x1a4>)
 8000350:	4f46      	ldr	r7, [pc, #280]	; (800046c <HAL_GPIO_Init+0x1a4>)
 8000352:	69ad      	ldr	r5, [r5, #24]
 8000354:	f026 0803 	bic.w	r8, r6, #3
 8000358:	f045 0501 	orr.w	r5, r5, #1
 800035c:	61bd      	str	r5, [r7, #24]
 800035e:	69bd      	ldr	r5, [r7, #24]
 8000360:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000364:	f005 0501 	and.w	r5, r5, #1
 8000368:	9501      	str	r5, [sp, #4]
 800036a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800036e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000372:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000374:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000378:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800037c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000380:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000384:	4d3a      	ldr	r5, [pc, #232]	; (8000470 <HAL_GPIO_Init+0x1a8>)
 8000386:	42a8      	cmp	r0, r5
 8000388:	d068      	beq.n	800045c <HAL_GPIO_Init+0x194>
 800038a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038e:	42a8      	cmp	r0, r5
 8000390:	d066      	beq.n	8000460 <HAL_GPIO_Init+0x198>
 8000392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000396:	42a8      	cmp	r0, r5
 8000398:	d064      	beq.n	8000464 <HAL_GPIO_Init+0x19c>
 800039a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039e:	42a8      	cmp	r0, r5
 80003a0:	bf0c      	ite	eq
 80003a2:	2503      	moveq	r5, #3
 80003a4:	2504      	movne	r5, #4
 80003a6:	fa05 f50b 	lsl.w	r5, r5, fp
 80003aa:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003ae:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003b2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003b4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003b8:	bf14      	ite	ne
 80003ba:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003bc:	43a5      	biceq	r5, r4
 80003be:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003c0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003c2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003c6:	bf14      	ite	ne
 80003c8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ca:	43a5      	biceq	r5, r4
 80003cc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ce:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003d0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d4:	bf14      	ite	ne
 80003d6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003d8:	43a5      	biceq	r5, r4
 80003da:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003dc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003de:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e2:	bf14      	ite	ne
 80003e4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003e6:	ea25 0404 	biceq.w	r4, r5, r4
 80003ea:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003ec:	3601      	adds	r6, #1
 80003ee:	2e10      	cmp	r6, #16
 80003f0:	f47f af73 	bne.w	80002da <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003f4:	b003      	add	sp, #12
 80003f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003fa:	2d03      	cmp	r5, #3
 80003fc:	d022      	beq.n	8000444 <HAL_GPIO_Init+0x17c>
 80003fe:	2d11      	cmp	r5, #17
 8000400:	d184      	bne.n	800030c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000402:	68ca      	ldr	r2, [r1, #12]
 8000404:	3204      	adds	r2, #4
          break;
 8000406:	e781      	b.n	800030c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000408:	4f1a      	ldr	r7, [pc, #104]	; (8000474 <HAL_GPIO_Init+0x1ac>)
 800040a:	42bd      	cmp	r5, r7
 800040c:	d009      	beq.n	8000422 <HAL_GPIO_Init+0x15a>
 800040e:	d812      	bhi.n	8000436 <HAL_GPIO_Init+0x16e>
 8000410:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000480 <HAL_GPIO_Init+0x1b8>
 8000414:	454d      	cmp	r5, r9
 8000416:	d004      	beq.n	8000422 <HAL_GPIO_Init+0x15a>
 8000418:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800041c:	454d      	cmp	r5, r9
 800041e:	f47f af75 	bne.w	800030c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000422:	688a      	ldr	r2, [r1, #8]
 8000424:	b1c2      	cbz	r2, 8000458 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000426:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000428:	bf0c      	ite	eq
 800042a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800042e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000432:	2208      	movs	r2, #8
 8000434:	e76a      	b.n	800030c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000436:	4575      	cmp	r5, lr
 8000438:	d0f3      	beq.n	8000422 <HAL_GPIO_Init+0x15a>
 800043a:	4565      	cmp	r5, ip
 800043c:	d0f1      	beq.n	8000422 <HAL_GPIO_Init+0x15a>
 800043e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000484 <HAL_GPIO_Init+0x1bc>
 8000442:	e7eb      	b.n	800041c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000444:	2200      	movs	r2, #0
 8000446:	e761      	b.n	800030c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000448:	68ca      	ldr	r2, [r1, #12]
          break;
 800044a:	e75f      	b.n	800030c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800044c:	68ca      	ldr	r2, [r1, #12]
 800044e:	3208      	adds	r2, #8
          break;
 8000450:	e75c      	b.n	800030c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000452:	68ca      	ldr	r2, [r1, #12]
 8000454:	320c      	adds	r2, #12
          break;
 8000456:	e759      	b.n	800030c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000458:	2204      	movs	r2, #4
 800045a:	e757      	b.n	800030c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800045c:	2500      	movs	r5, #0
 800045e:	e7a2      	b.n	80003a6 <HAL_GPIO_Init+0xde>
 8000460:	2501      	movs	r5, #1
 8000462:	e7a0      	b.n	80003a6 <HAL_GPIO_Init+0xde>
 8000464:	2502      	movs	r5, #2
 8000466:	e79e      	b.n	80003a6 <HAL_GPIO_Init+0xde>
 8000468:	40010400 	.word	0x40010400
 800046c:	40021000 	.word	0x40021000
 8000470:	40010800 	.word	0x40010800
 8000474:	10210000 	.word	0x10210000
 8000478:	10310000 	.word	0x10310000
 800047c:	10320000 	.word	0x10320000
 8000480:	10110000 	.word	0x10110000
 8000484:	10220000 	.word	0x10220000

08000488 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000488:	6883      	ldr	r3, [r0, #8]
 800048a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800048c:	bf14      	ite	ne
 800048e:	2001      	movne	r0, #1
 8000490:	2000      	moveq	r0, #0
 8000492:	4770      	bx	lr

08000494 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000494:	b10a      	cbz	r2, 800049a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000496:	6101      	str	r1, [r0, #16]
 8000498:	4770      	bx	lr
 800049a:	0409      	lsls	r1, r1, #16
 800049c:	e7fb      	b.n	8000496 <HAL_GPIO_WritePin+0x2>

0800049e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800049e:	6802      	ldr	r2, [r0, #0]
 80004a0:	6953      	ldr	r3, [r2, #20]
 80004a2:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80004a6:	d00d      	beq.n	80004c4 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004a8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80004ac:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004ae:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80004b0:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004b2:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80004b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80004bc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80004c0:	2001      	movs	r0, #1
 80004c2:	4770      	bx	lr
  }
  return HAL_OK;
 80004c4:	4618      	mov	r0, r3
}
 80004c6:	4770      	bx	lr

080004c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80004c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004cc:	4604      	mov	r4, r0
 80004ce:	4617      	mov	r7, r2
 80004d0:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80004d2:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80004d6:	b28e      	uxth	r6, r1
 80004d8:	6825      	ldr	r5, [r4, #0]
 80004da:	f1b8 0f01 	cmp.w	r8, #1
 80004de:	bf0c      	ite	eq
 80004e0:	696b      	ldreq	r3, [r5, #20]
 80004e2:	69ab      	ldrne	r3, [r5, #24]
 80004e4:	ea36 0303 	bics.w	r3, r6, r3
 80004e8:	bf14      	ite	ne
 80004ea:	2001      	movne	r0, #1
 80004ec:	2000      	moveq	r0, #0
 80004ee:	b908      	cbnz	r0, 80004f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80004f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004f4:	696b      	ldr	r3, [r5, #20]
 80004f6:	055a      	lsls	r2, r3, #21
 80004f8:	d512      	bpl.n	8000520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80004fa:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80004fc:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80004fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000502:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000504:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000508:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800050a:	2304      	movs	r3, #4
 800050c:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800050e:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8000512:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8000514:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8000518:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 800051c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000520:	1c7b      	adds	r3, r7, #1
 8000522:	d0d9      	beq.n	80004d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000524:	b94f      	cbnz	r7, 800053a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000526:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000528:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800052a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800052c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000530:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000534:	2003      	movs	r0, #3
 8000536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800053a:	f7ff fe51 	bl	80001e0 <HAL_GetTick>
 800053e:	eba0 0009 	sub.w	r0, r0, r9
 8000542:	4287      	cmp	r7, r0
 8000544:	d2c8      	bcs.n	80004d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8000546:	e7ee      	b.n	8000526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08000548 <I2C_WaitOnFlagUntilTimeout>:
{
 8000548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800054c:	4604      	mov	r4, r0
 800054e:	4690      	mov	r8, r2
 8000550:	461f      	mov	r7, r3
 8000552:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000554:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000558:	b28d      	uxth	r5, r1
 800055a:	6823      	ldr	r3, [r4, #0]
 800055c:	f1b9 0f01 	cmp.w	r9, #1
 8000560:	bf0c      	ite	eq
 8000562:	695b      	ldreq	r3, [r3, #20]
 8000564:	699b      	ldrne	r3, [r3, #24]
 8000566:	ea35 0303 	bics.w	r3, r5, r3
 800056a:	bf0c      	ite	eq
 800056c:	2301      	moveq	r3, #1
 800056e:	2300      	movne	r3, #0
 8000570:	4543      	cmp	r3, r8
 8000572:	d002      	beq.n	800057a <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000574:	2000      	movs	r0, #0
}
 8000576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800057a:	1c7b      	adds	r3, r7, #1
 800057c:	d0ed      	beq.n	800055a <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800057e:	b95f      	cbnz	r7, 8000598 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000580:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000582:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000584:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000586:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800058a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800058e:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000590:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000598:	f7ff fe22 	bl	80001e0 <HAL_GetTick>
 800059c:	1b80      	subs	r0, r0, r6
 800059e:	4287      	cmp	r7, r0
 80005a0:	d2db      	bcs.n	800055a <I2C_WaitOnFlagUntilTimeout+0x12>
 80005a2:	e7ed      	b.n	8000580 <I2C_WaitOnFlagUntilTimeout+0x38>

080005a4 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	4604      	mov	r4, r0
 80005a8:	460d      	mov	r5, r1
 80005aa:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80005ac:	6823      	ldr	r3, [r4, #0]
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	061b      	lsls	r3, r3, #24
 80005b2:	d501      	bpl.n	80005b8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80005b4:	2000      	movs	r0, #0
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80005b8:	4620      	mov	r0, r4
 80005ba:	f7ff ff70 	bl	800049e <I2C_IsAcknowledgeFailed>
 80005be:	b9a8      	cbnz	r0, 80005ec <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80005c0:	1c6a      	adds	r2, r5, #1
 80005c2:	d0f3      	beq.n	80005ac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005c4:	b965      	cbnz	r5, 80005e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80005c8:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005ca:	f043 0320 	orr.w	r3, r3, #32
 80005ce:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80005d0:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80005d2:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80005d4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80005d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80005da:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80005de:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005e0:	f7ff fdfe 	bl	80001e0 <HAL_GetTick>
 80005e4:	1b80      	subs	r0, r0, r6
 80005e6:	4285      	cmp	r5, r0
 80005e8:	d2e0      	bcs.n	80005ac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80005ea:	e7ec      	b.n	80005c6 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80005ec:	2001      	movs	r0, #1
}
 80005ee:	bd70      	pop	{r4, r5, r6, pc}

080005f0 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	4604      	mov	r4, r0
 80005f4:	460d      	mov	r5, r1
 80005f6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80005f8:	6823      	ldr	r3, [r4, #0]
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	075b      	lsls	r3, r3, #29
 80005fe:	d501      	bpl.n	8000604 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000600:	2000      	movs	r0, #0
 8000602:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000604:	4620      	mov	r0, r4
 8000606:	f7ff ff4a 	bl	800049e <I2C_IsAcknowledgeFailed>
 800060a:	b9a8      	cbnz	r0, 8000638 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800060c:	1c6a      	adds	r2, r5, #1
 800060e:	d0f3      	beq.n	80005f8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000610:	b965      	cbnz	r5, 800062c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000612:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000614:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000616:	f043 0320 	orr.w	r3, r3, #32
 800061a:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800061c:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800061e:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000620:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000622:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000626:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800062a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800062c:	f7ff fdd8 	bl	80001e0 <HAL_GetTick>
 8000630:	1b80      	subs	r0, r0, r6
 8000632:	4285      	cmp	r5, r0
 8000634:	d2e0      	bcs.n	80005f8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8000636:	e7ec      	b.n	8000612 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000638:	2001      	movs	r0, #1
}
 800063a:	bd70      	pop	{r4, r5, r6, pc}

0800063c <HAL_I2C_Init>:
{
 800063c:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 800063e:	4604      	mov	r4, r0
 8000640:	b908      	cbnz	r0, 8000646 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000642:	2001      	movs	r0, #1
 8000644:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000646:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800064a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800064e:	b91b      	cbnz	r3, 8000658 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000650:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000654:	f001 f904 	bl	8001860 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000658:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800065a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800065c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000660:	6813      	ldr	r3, [r2, #0]
 8000662:	f023 0301 	bic.w	r3, r3, #1
 8000666:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000668:	f000 fbb8 	bl	8000ddc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800066c:	6863      	ldr	r3, [r4, #4]
 800066e:	4a2f      	ldr	r2, [pc, #188]	; (800072c <HAL_I2C_Init+0xf0>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d830      	bhi.n	80006d6 <HAL_I2C_Init+0x9a>
 8000674:	4a2e      	ldr	r2, [pc, #184]	; (8000730 <HAL_I2C_Init+0xf4>)
 8000676:	4290      	cmp	r0, r2
 8000678:	d9e3      	bls.n	8000642 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800067a:	4a2e      	ldr	r2, [pc, #184]	; (8000734 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 800067c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800067e:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8000682:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000684:	3201      	adds	r2, #1
 8000686:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000688:	4a28      	ldr	r2, [pc, #160]	; (800072c <HAL_I2C_Init+0xf0>)
 800068a:	3801      	subs	r0, #1
 800068c:	4293      	cmp	r3, r2
 800068e:	d832      	bhi.n	80006f6 <HAL_I2C_Init+0xba>
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	fbb0 f0f3 	udiv	r0, r0, r3
 8000696:	1c43      	adds	r3, r0, #1
 8000698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800069c:	2b04      	cmp	r3, #4
 800069e:	bf38      	it	cc
 80006a0:	2304      	movcc	r3, #4
 80006a2:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80006a4:	6a22      	ldr	r2, [r4, #32]
 80006a6:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80006a8:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80006aa:	4313      	orrs	r3, r2
 80006ac:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80006ae:	68e2      	ldr	r2, [r4, #12]
 80006b0:	6923      	ldr	r3, [r4, #16]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80006b6:	69a2      	ldr	r2, [r4, #24]
 80006b8:	6963      	ldr	r3, [r4, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80006be:	680b      	ldr	r3, [r1, #0]
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80006c6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80006c8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80006ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80006ce:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80006d0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80006d4:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <HAL_I2C_Init+0xfc>)
 80006d8:	4290      	cmp	r0, r2
 80006da:	d9b2      	bls.n	8000642 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80006dc:	4d15      	ldr	r5, [pc, #84]	; (8000734 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80006de:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80006e2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80006e6:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80006e8:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80006ea:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80006ec:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80006f0:	fbb2 f2f5 	udiv	r2, r2, r5
 80006f4:	e7c6      	b.n	8000684 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80006f6:	68a2      	ldr	r2, [r4, #8]
 80006f8:	b952      	cbnz	r2, 8000710 <HAL_I2C_Init+0xd4>
 80006fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80006fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8000702:	1c43      	adds	r3, r0, #1
 8000704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000708:	b16b      	cbz	r3, 8000726 <HAL_I2C_Init+0xea>
 800070a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800070e:	e7c8      	b.n	80006a2 <HAL_I2C_Init+0x66>
 8000710:	2219      	movs	r2, #25
 8000712:	4353      	muls	r3, r2
 8000714:	fbb0 f0f3 	udiv	r0, r0, r3
 8000718:	1c43      	adds	r3, r0, #1
 800071a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800071e:	b113      	cbz	r3, 8000726 <HAL_I2C_Init+0xea>
 8000720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000724:	e7bd      	b.n	80006a2 <HAL_I2C_Init+0x66>
 8000726:	2301      	movs	r3, #1
 8000728:	e7bb      	b.n	80006a2 <HAL_I2C_Init+0x66>
 800072a:	bf00      	nop
 800072c:	000186a0 	.word	0x000186a0
 8000730:	001e847f 	.word	0x001e847f
 8000734:	000f4240 	.word	0x000f4240
 8000738:	003d08ff 	.word	0x003d08ff

0800073c <HAL_I2C_Master_Transmit>:
{
 800073c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000740:	4604      	mov	r4, r0
 8000742:	461f      	mov	r7, r3
 8000744:	460d      	mov	r5, r1
 8000746:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8000748:	f7ff fd4a 	bl	80001e0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800074c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000750:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000752:	2b20      	cmp	r3, #32
 8000754:	d004      	beq.n	8000760 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000756:	2502      	movs	r5, #2
}
 8000758:	4628      	mov	r0, r5
 800075a:	b004      	add	sp, #16
 800075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	2319      	movs	r3, #25
 8000764:	2201      	movs	r2, #1
 8000766:	495d      	ldr	r1, [pc, #372]	; (80008dc <HAL_I2C_Master_Transmit+0x1a0>)
 8000768:	4620      	mov	r0, r4
 800076a:	f7ff feed 	bl	8000548 <I2C_WaitOnFlagUntilTimeout>
 800076e:	2800      	cmp	r0, #0
 8000770:	d1f1      	bne.n	8000756 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000772:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000776:	2b01      	cmp	r3, #1
 8000778:	d0ed      	beq.n	8000756 <HAL_I2C_Master_Transmit+0x1a>
 800077a:	2301      	movs	r3, #1
 800077c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000780:	6823      	ldr	r3, [r4, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000786:	bf5e      	ittt	pl
 8000788:	681a      	ldrpl	r2, [r3, #0]
 800078a:	f042 0201 	orrpl.w	r2, r2, #1
 800078e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000796:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000798:	2221      	movs	r2, #33	; 0x21
 800079a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800079e:	2210      	movs	r2, #16
 80007a0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007a4:	2200      	movs	r2, #0
 80007a6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80007a8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80007ac:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80007ae:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80007b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80007b2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80007b6:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80007b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80007ba:	2a04      	cmp	r2, #4
 80007bc:	d004      	beq.n	80007c8 <HAL_I2C_Master_Transmit+0x8c>
 80007be:	2a01      	cmp	r2, #1
 80007c0:	d002      	beq.n	80007c8 <HAL_I2C_Master_Transmit+0x8c>
 80007c2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80007c6:	d104      	bne.n	80007d2 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	e002      	b.n	80007d8 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80007d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80007d4:	2a12      	cmp	r2, #18
 80007d6:	d0f7      	beq.n	80007c8 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80007d8:	9600      	str	r6, [sp, #0]
 80007da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80007dc:	2200      	movs	r2, #0
 80007de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80007e2:	4620      	mov	r0, r4
 80007e4:	f7ff feb0 	bl	8000548 <I2C_WaitOnFlagUntilTimeout>
 80007e8:	bb28      	cbnz	r0, 8000836 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80007ea:	6923      	ldr	r3, [r4, #16]
 80007ec:	6822      	ldr	r2, [r4, #0]
 80007ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007f2:	d112      	bne.n	800081a <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80007f4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80007f8:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80007fa:	4633      	mov	r3, r6
 80007fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80007fe:	4938      	ldr	r1, [pc, #224]	; (80008e0 <HAL_I2C_Master_Transmit+0x1a4>)
 8000800:	4620      	mov	r0, r4
 8000802:	f7ff fe61 	bl	80004c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000806:	4605      	mov	r5, r0
 8000808:	b9a0      	cbnz	r0, 8000834 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800080a:	6823      	ldr	r3, [r4, #0]
 800080c:	9003      	str	r0, [sp, #12]
 800080e:	695a      	ldr	r2, [r3, #20]
 8000810:	9203      	str	r2, [sp, #12]
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	9303      	str	r3, [sp, #12]
 8000816:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8000818:	e050      	b.n	80008bc <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800081a:	11eb      	asrs	r3, r5, #7
 800081c:	f003 0306 	and.w	r3, r3, #6
 8000820:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000824:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000826:	492f      	ldr	r1, [pc, #188]	; (80008e4 <HAL_I2C_Master_Transmit+0x1a8>)
 8000828:	4633      	mov	r3, r6
 800082a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800082c:	4620      	mov	r0, r4
 800082e:	f7ff fe4b 	bl	80004c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000832:	b148      	cbz	r0, 8000848 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000834:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000838:	2b04      	cmp	r3, #4
 800083a:	f04f 0300 	mov.w	r3, #0
 800083e:	d107      	bne.n	8000850 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8000840:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000844:	2501      	movs	r5, #1
 8000846:	e787      	b.n	8000758 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000848:	6823      	ldr	r3, [r4, #0]
 800084a:	b2ed      	uxtb	r5, r5
 800084c:	611d      	str	r5, [r3, #16]
 800084e:	e7d4      	b.n	80007fa <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8000850:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8000854:	2503      	movs	r5, #3
 8000856:	e77f      	b.n	8000758 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000858:	4632      	mov	r2, r6
 800085a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800085c:	4620      	mov	r0, r4
 800085e:	f7ff fea1 	bl	80005a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000862:	b140      	cbz	r0, 8000876 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000866:	2b04      	cmp	r3, #4
 8000868:	d1f4      	bne.n	8000854 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800086a:	6822      	ldr	r2, [r4, #0]
 800086c:	6813      	ldr	r3, [r2, #0]
 800086e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	e7e6      	b.n	8000844 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000876:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000878:	6820      	ldr	r0, [r4, #0]
 800087a:	1c4b      	adds	r3, r1, #1
 800087c:	6263      	str	r3, [r4, #36]	; 0x24
 800087e:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8000880:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000882:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8000884:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000886:	3b01      	subs	r3, #1
 8000888:	b29b      	uxth	r3, r3
 800088a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800088c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800088e:	1e53      	subs	r3, r2, #1
 8000890:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000892:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000894:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000896:	d50a      	bpl.n	80008ae <HAL_I2C_Master_Transmit+0x172>
 8000898:	b14b      	cbz	r3, 80008ae <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800089a:	1c8b      	adds	r3, r1, #2
 800089c:	6263      	str	r3, [r4, #36]	; 0x24
 800089e:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80008a0:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80008a2:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80008a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80008a6:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80008a8:	3b01      	subs	r3, #1
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80008ae:	4632      	mov	r2, r6
 80008b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80008b2:	4620      	mov	r0, r4
 80008b4:	f7ff fe9c 	bl	80005f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80008b8:	2800      	cmp	r0, #0
 80008ba:	d1d3      	bne.n	8000864 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80008bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1ca      	bne.n	8000858 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80008c2:	6821      	ldr	r1, [r4, #0]
 80008c4:	680a      	ldr	r2, [r1, #0]
 80008c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008ca:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80008cc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80008ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80008d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80008d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80008da:	e73d      	b.n	8000758 <HAL_I2C_Master_Transmit+0x1c>
 80008dc:	00100002 	.word	0x00100002
 80008e0:	00010002 	.word	0x00010002
 80008e4:	00010008 	.word	0x00010008

080008e8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008e8:	6803      	ldr	r3, [r0, #0]
{
 80008ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008ee:	07db      	lsls	r3, r3, #31
{
 80008f0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008f2:	d410      	bmi.n	8000916 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008f4:	682b      	ldr	r3, [r5, #0]
 80008f6:	079f      	lsls	r7, r3, #30
 80008f8:	d45e      	bmi.n	80009b8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008fa:	682b      	ldr	r3, [r5, #0]
 80008fc:	0719      	lsls	r1, r3, #28
 80008fe:	f100 8095 	bmi.w	8000a2c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	075a      	lsls	r2, r3, #29
 8000906:	f100 80bf 	bmi.w	8000a88 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800090a:	69ea      	ldr	r2, [r5, #28]
 800090c:	2a00      	cmp	r2, #0
 800090e:	f040 812d 	bne.w	8000b6c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000912:	2000      	movs	r0, #0
 8000914:	e014      	b.n	8000940 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000916:	4c90      	ldr	r4, [pc, #576]	; (8000b58 <HAL_RCC_OscConfig+0x270>)
 8000918:	6863      	ldr	r3, [r4, #4]
 800091a:	f003 030c 	and.w	r3, r3, #12
 800091e:	2b04      	cmp	r3, #4
 8000920:	d007      	beq.n	8000932 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000922:	6863      	ldr	r3, [r4, #4]
 8000924:	f003 030c 	and.w	r3, r3, #12
 8000928:	2b08      	cmp	r3, #8
 800092a:	d10c      	bne.n	8000946 <HAL_RCC_OscConfig+0x5e>
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	03de      	lsls	r6, r3, #15
 8000930:	d509      	bpl.n	8000946 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000932:	6823      	ldr	r3, [r4, #0]
 8000934:	039c      	lsls	r4, r3, #14
 8000936:	d5dd      	bpl.n	80008f4 <HAL_RCC_OscConfig+0xc>
 8000938:	686b      	ldr	r3, [r5, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1da      	bne.n	80008f4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800093e:	2001      	movs	r0, #1
}
 8000940:	b002      	add	sp, #8
 8000942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000946:	686b      	ldr	r3, [r5, #4]
 8000948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800094c:	d110      	bne.n	8000970 <HAL_RCC_OscConfig+0x88>
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000954:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000956:	f7ff fc43 	bl	80001e0 <HAL_GetTick>
 800095a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095c:	6823      	ldr	r3, [r4, #0]
 800095e:	0398      	lsls	r0, r3, #14
 8000960:	d4c8      	bmi.n	80008f4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000962:	f7ff fc3d 	bl	80001e0 <HAL_GetTick>
 8000966:	1b80      	subs	r0, r0, r6
 8000968:	2864      	cmp	r0, #100	; 0x64
 800096a:	d9f7      	bls.n	800095c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800096c:	2003      	movs	r0, #3
 800096e:	e7e7      	b.n	8000940 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000970:	b99b      	cbnz	r3, 800099a <HAL_RCC_OscConfig+0xb2>
 8000972:	6823      	ldr	r3, [r4, #0]
 8000974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000978:	6023      	str	r3, [r4, #0]
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000980:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000982:	f7ff fc2d 	bl	80001e0 <HAL_GetTick>
 8000986:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000988:	6823      	ldr	r3, [r4, #0]
 800098a:	0399      	lsls	r1, r3, #14
 800098c:	d5b2      	bpl.n	80008f4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800098e:	f7ff fc27 	bl	80001e0 <HAL_GetTick>
 8000992:	1b80      	subs	r0, r0, r6
 8000994:	2864      	cmp	r0, #100	; 0x64
 8000996:	d9f7      	bls.n	8000988 <HAL_RCC_OscConfig+0xa0>
 8000998:	e7e8      	b.n	800096c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800099a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800099e:	6823      	ldr	r3, [r4, #0]
 80009a0:	d103      	bne.n	80009aa <HAL_RCC_OscConfig+0xc2>
 80009a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a6:	6023      	str	r3, [r4, #0]
 80009a8:	e7d1      	b.n	800094e <HAL_RCC_OscConfig+0x66>
 80009aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ae:	6023      	str	r3, [r4, #0]
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009b6:	e7cd      	b.n	8000954 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009b8:	4c67      	ldr	r4, [pc, #412]	; (8000b58 <HAL_RCC_OscConfig+0x270>)
 80009ba:	6863      	ldr	r3, [r4, #4]
 80009bc:	f013 0f0c 	tst.w	r3, #12
 80009c0:	d007      	beq.n	80009d2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009c2:	6863      	ldr	r3, [r4, #4]
 80009c4:	f003 030c 	and.w	r3, r3, #12
 80009c8:	2b08      	cmp	r3, #8
 80009ca:	d110      	bne.n	80009ee <HAL_RCC_OscConfig+0x106>
 80009cc:	6863      	ldr	r3, [r4, #4]
 80009ce:	03da      	lsls	r2, r3, #15
 80009d0:	d40d      	bmi.n	80009ee <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d2:	6823      	ldr	r3, [r4, #0]
 80009d4:	079b      	lsls	r3, r3, #30
 80009d6:	d502      	bpl.n	80009de <HAL_RCC_OscConfig+0xf6>
 80009d8:	692b      	ldr	r3, [r5, #16]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d1af      	bne.n	800093e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	696a      	ldr	r2, [r5, #20]
 80009e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009e6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009ea:	6023      	str	r3, [r4, #0]
 80009ec:	e785      	b.n	80008fa <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009ee:	692a      	ldr	r2, [r5, #16]
 80009f0:	4b5a      	ldr	r3, [pc, #360]	; (8000b5c <HAL_RCC_OscConfig+0x274>)
 80009f2:	b16a      	cbz	r2, 8000a10 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80009f4:	2201      	movs	r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f8:	f7ff fbf2 	bl	80001e0 <HAL_GetTick>
 80009fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009fe:	6823      	ldr	r3, [r4, #0]
 8000a00:	079f      	lsls	r7, r3, #30
 8000a02:	d4ec      	bmi.n	80009de <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a04:	f7ff fbec 	bl	80001e0 <HAL_GetTick>
 8000a08:	1b80      	subs	r0, r0, r6
 8000a0a:	2802      	cmp	r0, #2
 8000a0c:	d9f7      	bls.n	80009fe <HAL_RCC_OscConfig+0x116>
 8000a0e:	e7ad      	b.n	800096c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000a10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a12:	f7ff fbe5 	bl	80001e0 <HAL_GetTick>
 8000a16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a18:	6823      	ldr	r3, [r4, #0]
 8000a1a:	0798      	lsls	r0, r3, #30
 8000a1c:	f57f af6d 	bpl.w	80008fa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a20:	f7ff fbde 	bl	80001e0 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	2802      	cmp	r0, #2
 8000a28:	d9f6      	bls.n	8000a18 <HAL_RCC_OscConfig+0x130>
 8000a2a:	e79f      	b.n	800096c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a2c:	69aa      	ldr	r2, [r5, #24]
 8000a2e:	4c4a      	ldr	r4, [pc, #296]	; (8000b58 <HAL_RCC_OscConfig+0x270>)
 8000a30:	4b4b      	ldr	r3, [pc, #300]	; (8000b60 <HAL_RCC_OscConfig+0x278>)
 8000a32:	b1da      	cbz	r2, 8000a6c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000a34:	2201      	movs	r2, #1
 8000a36:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a38:	f7ff fbd2 	bl	80001e0 <HAL_GetTick>
 8000a3c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a40:	079b      	lsls	r3, r3, #30
 8000a42:	d50d      	bpl.n	8000a60 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000a44:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a48:	4b46      	ldr	r3, [pc, #280]	; (8000b64 <HAL_RCC_OscConfig+0x27c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a50:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000a52:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000a54:	9b01      	ldr	r3, [sp, #4]
 8000a56:	1e5a      	subs	r2, r3, #1
 8000a58:	9201      	str	r2, [sp, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f9      	bne.n	8000a52 <HAL_RCC_OscConfig+0x16a>
 8000a5e:	e750      	b.n	8000902 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a60:	f7ff fbbe 	bl	80001e0 <HAL_GetTick>
 8000a64:	1b80      	subs	r0, r0, r6
 8000a66:	2802      	cmp	r0, #2
 8000a68:	d9e9      	bls.n	8000a3e <HAL_RCC_OscConfig+0x156>
 8000a6a:	e77f      	b.n	800096c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000a6c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a6e:	f7ff fbb7 	bl	80001e0 <HAL_GetTick>
 8000a72:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a76:	079f      	lsls	r7, r3, #30
 8000a78:	f57f af43 	bpl.w	8000902 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a7c:	f7ff fbb0 	bl	80001e0 <HAL_GetTick>
 8000a80:	1b80      	subs	r0, r0, r6
 8000a82:	2802      	cmp	r0, #2
 8000a84:	d9f6      	bls.n	8000a74 <HAL_RCC_OscConfig+0x18c>
 8000a86:	e771      	b.n	800096c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a88:	4c33      	ldr	r4, [pc, #204]	; (8000b58 <HAL_RCC_OscConfig+0x270>)
 8000a8a:	69e3      	ldr	r3, [r4, #28]
 8000a8c:	00d8      	lsls	r0, r3, #3
 8000a8e:	d424      	bmi.n	8000ada <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000a90:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	69e3      	ldr	r3, [r4, #28]
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	61e3      	str	r3, [r4, #28]
 8000a9a:	69e3      	ldr	r3, [r4, #28]
 8000a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa4:	4e30      	ldr	r6, [pc, #192]	; (8000b68 <HAL_RCC_OscConfig+0x280>)
 8000aa6:	6833      	ldr	r3, [r6, #0]
 8000aa8:	05d9      	lsls	r1, r3, #23
 8000aaa:	d518      	bpl.n	8000ade <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aac:	68eb      	ldr	r3, [r5, #12]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d126      	bne.n	8000b00 <HAL_RCC_OscConfig+0x218>
 8000ab2:	6a23      	ldr	r3, [r4, #32]
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000aba:	f7ff fb91 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000abe:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ac2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac4:	6a23      	ldr	r3, [r4, #32]
 8000ac6:	079b      	lsls	r3, r3, #30
 8000ac8:	d53f      	bpl.n	8000b4a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000aca:	2f00      	cmp	r7, #0
 8000acc:	f43f af1d 	beq.w	800090a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ad0:	69e3      	ldr	r3, [r4, #28]
 8000ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	61e3      	str	r3, [r4, #28]
 8000ad8:	e717      	b.n	800090a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000ada:	2700      	movs	r7, #0
 8000adc:	e7e2      	b.n	8000aa4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ade:	6833      	ldr	r3, [r6, #0]
 8000ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ae6:	f7ff fb7b 	bl	80001e0 <HAL_GetTick>
 8000aea:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aec:	6833      	ldr	r3, [r6, #0]
 8000aee:	05da      	lsls	r2, r3, #23
 8000af0:	d4dc      	bmi.n	8000aac <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000af2:	f7ff fb75 	bl	80001e0 <HAL_GetTick>
 8000af6:	eba0 0008 	sub.w	r0, r0, r8
 8000afa:	2864      	cmp	r0, #100	; 0x64
 8000afc:	d9f6      	bls.n	8000aec <HAL_RCC_OscConfig+0x204>
 8000afe:	e735      	b.n	800096c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b00:	b9ab      	cbnz	r3, 8000b2e <HAL_RCC_OscConfig+0x246>
 8000b02:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b04:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b08:	f023 0301 	bic.w	r3, r3, #1
 8000b0c:	6223      	str	r3, [r4, #32]
 8000b0e:	6a23      	ldr	r3, [r4, #32]
 8000b10:	f023 0304 	bic.w	r3, r3, #4
 8000b14:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b16:	f7ff fb63 	bl	80001e0 <HAL_GetTick>
 8000b1a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b1c:	6a23      	ldr	r3, [r4, #32]
 8000b1e:	0798      	lsls	r0, r3, #30
 8000b20:	d5d3      	bpl.n	8000aca <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b22:	f7ff fb5d 	bl	80001e0 <HAL_GetTick>
 8000b26:	1b80      	subs	r0, r0, r6
 8000b28:	4540      	cmp	r0, r8
 8000b2a:	d9f7      	bls.n	8000b1c <HAL_RCC_OscConfig+0x234>
 8000b2c:	e71e      	b.n	800096c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b2e:	2b05      	cmp	r3, #5
 8000b30:	6a23      	ldr	r3, [r4, #32]
 8000b32:	d103      	bne.n	8000b3c <HAL_RCC_OscConfig+0x254>
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6223      	str	r3, [r4, #32]
 8000b3a:	e7ba      	b.n	8000ab2 <HAL_RCC_OscConfig+0x1ca>
 8000b3c:	f023 0301 	bic.w	r3, r3, #1
 8000b40:	6223      	str	r3, [r4, #32]
 8000b42:	6a23      	ldr	r3, [r4, #32]
 8000b44:	f023 0304 	bic.w	r3, r3, #4
 8000b48:	e7b6      	b.n	8000ab8 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b4a:	f7ff fb49 	bl	80001e0 <HAL_GetTick>
 8000b4e:	eba0 0008 	sub.w	r0, r0, r8
 8000b52:	42b0      	cmp	r0, r6
 8000b54:	d9b6      	bls.n	8000ac4 <HAL_RCC_OscConfig+0x1dc>
 8000b56:	e709      	b.n	800096c <HAL_RCC_OscConfig+0x84>
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	42420000 	.word	0x42420000
 8000b60:	42420480 	.word	0x42420480
 8000b64:	20000008 	.word	0x20000008
 8000b68:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b6c:	4c22      	ldr	r4, [pc, #136]	; (8000bf8 <HAL_RCC_OscConfig+0x310>)
 8000b6e:	6863      	ldr	r3, [r4, #4]
 8000b70:	f003 030c 	and.w	r3, r3, #12
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	f43f aee2 	beq.w	800093e <HAL_RCC_OscConfig+0x56>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	4e1f      	ldr	r6, [pc, #124]	; (8000bfc <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b7e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b80:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b82:	d12b      	bne.n	8000bdc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000b84:	f7ff fb2c 	bl	80001e0 <HAL_GetTick>
 8000b88:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	0199      	lsls	r1, r3, #6
 8000b8e:	d41f      	bmi.n	8000bd0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b90:	6a2b      	ldr	r3, [r5, #32]
 8000b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b96:	d105      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b98:	6862      	ldr	r2, [r4, #4]
 8000b9a:	68a9      	ldr	r1, [r5, #8]
 8000b9c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ba4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000ba6:	6862      	ldr	r2, [r4, #4]
 8000ba8:	430b      	orrs	r3, r1
 8000baa:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bb6:	f7ff fb13 	bl	80001e0 <HAL_GetTick>
 8000bba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	019a      	lsls	r2, r3, #6
 8000bc0:	f53f aea7 	bmi.w	8000912 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc4:	f7ff fb0c 	bl	80001e0 <HAL_GetTick>
 8000bc8:	1b40      	subs	r0, r0, r5
 8000bca:	2802      	cmp	r0, #2
 8000bcc:	d9f6      	bls.n	8000bbc <HAL_RCC_OscConfig+0x2d4>
 8000bce:	e6cd      	b.n	800096c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bd0:	f7ff fb06 	bl	80001e0 <HAL_GetTick>
 8000bd4:	1bc0      	subs	r0, r0, r7
 8000bd6:	2802      	cmp	r0, #2
 8000bd8:	d9d7      	bls.n	8000b8a <HAL_RCC_OscConfig+0x2a2>
 8000bda:	e6c7      	b.n	800096c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fb00 	bl	80001e0 <HAL_GetTick>
 8000be0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	019b      	lsls	r3, r3, #6
 8000be6:	f57f ae94 	bpl.w	8000912 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bea:	f7ff faf9 	bl	80001e0 <HAL_GetTick>
 8000bee:	1b40      	subs	r0, r0, r5
 8000bf0:	2802      	cmp	r0, #2
 8000bf2:	d9f6      	bls.n	8000be2 <HAL_RCC_OscConfig+0x2fa>
 8000bf4:	e6ba      	b.n	800096c <HAL_RCC_OscConfig+0x84>
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	42420060 	.word	0x42420060

08000c00 <HAL_RCC_GetSysClockFreq>:
{
 8000c00:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000c04:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c06:	ac02      	add	r4, sp, #8
 8000c08:	f103 0510 	add.w	r5, r3, #16
 8000c0c:	4622      	mov	r2, r4
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	6859      	ldr	r1, [r3, #4]
 8000c12:	3308      	adds	r3, #8
 8000c14:	c203      	stmia	r2!, {r0, r1}
 8000c16:	42ab      	cmp	r3, r5
 8000c18:	4614      	mov	r4, r2
 8000c1a:	d1f7      	bne.n	8000c0c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c22:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000c24:	4911      	ldr	r1, [pc, #68]	; (8000c6c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c26:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000c2a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c2c:	f003 020c 	and.w	r2, r3, #12
 8000c30:	2a08      	cmp	r2, #8
 8000c32:	d117      	bne.n	8000c64 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c34:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000c38:	a806      	add	r0, sp, #24
 8000c3a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c3c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c3e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c42:	d50c      	bpl.n	8000c5e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c44:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c48:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c4c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c4e:	aa06      	add	r2, sp, #24
 8000c50:	4413      	add	r3, r2
 8000c52:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c56:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000c5a:	b007      	add	sp, #28
 8000c5c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <HAL_RCC_GetSysClockFreq+0x74>)
 8000c60:	4350      	muls	r0, r2
 8000c62:	e7fa      	b.n	8000c5a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000c66:	e7f8      	b.n	8000c5a <HAL_RCC_GetSysClockFreq+0x5a>
 8000c68:	08002c10 	.word	0x08002c10
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	007a1200 	.word	0x007a1200
 8000c74:	003d0900 	.word	0x003d0900

08000c78 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c78:	4a54      	ldr	r2, [pc, #336]	; (8000dcc <HAL_RCC_ClockConfig+0x154>)
{
 8000c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c7e:	6813      	ldr	r3, [r2, #0]
{
 8000c80:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	428b      	cmp	r3, r1
{
 8000c88:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c8a:	d32a      	bcc.n	8000ce2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c8c:	6829      	ldr	r1, [r5, #0]
 8000c8e:	078c      	lsls	r4, r1, #30
 8000c90:	d434      	bmi.n	8000cfc <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c92:	07ca      	lsls	r2, r1, #31
 8000c94:	d447      	bmi.n	8000d26 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c96:	4a4d      	ldr	r2, [pc, #308]	; (8000dcc <HAL_RCC_ClockConfig+0x154>)
 8000c98:	6813      	ldr	r3, [r2, #0]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	f0c0 8082 	bcc.w	8000da8 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca4:	682a      	ldr	r2, [r5, #0]
 8000ca6:	4c4a      	ldr	r4, [pc, #296]	; (8000dd0 <HAL_RCC_ClockConfig+0x158>)
 8000ca8:	f012 0f04 	tst.w	r2, #4
 8000cac:	f040 8087 	bne.w	8000dbe <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cb0:	0713      	lsls	r3, r2, #28
 8000cb2:	d506      	bpl.n	8000cc2 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000cb4:	6863      	ldr	r3, [r4, #4]
 8000cb6:	692a      	ldr	r2, [r5, #16]
 8000cb8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000cbc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000cc0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cc2:	f7ff ff9d 	bl	8000c00 <HAL_RCC_GetSysClockFreq>
 8000cc6:	6863      	ldr	r3, [r4, #4]
 8000cc8:	4a42      	ldr	r2, [pc, #264]	; (8000dd4 <HAL_RCC_ClockConfig+0x15c>)
 8000cca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cce:	5cd3      	ldrb	r3, [r2, r3]
 8000cd0:	40d8      	lsrs	r0, r3
 8000cd2:	4b41      	ldr	r3, [pc, #260]	; (8000dd8 <HAL_RCC_ClockConfig+0x160>)
 8000cd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fa40 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8000cdc:	2000      	movs	r0, #0
}
 8000cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce2:	6813      	ldr	r3, [r2, #0]
 8000ce4:	f023 0307 	bic.w	r3, r3, #7
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cec:	6813      	ldr	r3, [r2, #0]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d0ca      	beq.n	8000c8c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cfc:	4b34      	ldr	r3, [pc, #208]	; (8000dd0 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cfe:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d02:	bf1e      	ittt	ne
 8000d04:	685a      	ldrne	r2, [r3, #4]
 8000d06:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000d0a:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d0c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d0e:	bf42      	ittt	mi
 8000d10:	685a      	ldrmi	r2, [r3, #4]
 8000d12:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000d16:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	68a8      	ldr	r0, [r5, #8]
 8000d1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d20:	4302      	orrs	r2, r0
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	e7b5      	b.n	8000c92 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d26:	686a      	ldr	r2, [r5, #4]
 8000d28:	4c29      	ldr	r4, [pc, #164]	; (8000dd0 <HAL_RCC_ClockConfig+0x158>)
 8000d2a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d2e:	d11c      	bne.n	8000d6a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d34:	d0df      	beq.n	8000cf6 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d36:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d38:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d3c:	f023 0303 	bic.w	r3, r3, #3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000d44:	f7ff fa4c 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d48:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000d4a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d114      	bne.n	8000d7a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d50:	6863      	ldr	r3, [r4, #4]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	d09d      	beq.n	8000c96 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d5a:	f7ff fa41 	bl	80001e0 <HAL_GetTick>
 8000d5e:	1bc0      	subs	r0, r0, r7
 8000d60:	4540      	cmp	r0, r8
 8000d62:	d9f5      	bls.n	8000d50 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000d64:	2003      	movs	r0, #3
 8000d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d6a:	2a02      	cmp	r2, #2
 8000d6c:	d102      	bne.n	8000d74 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d72:	e7df      	b.n	8000d34 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	f013 0f02 	tst.w	r3, #2
 8000d78:	e7dc      	b.n	8000d34 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d10f      	bne.n	8000d9e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d7e:	6863      	ldr	r3, [r4, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d086      	beq.n	8000c96 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d88:	f7ff fa2a 	bl	80001e0 <HAL_GetTick>
 8000d8c:	1bc0      	subs	r0, r0, r7
 8000d8e:	4540      	cmp	r0, r8
 8000d90:	d9f5      	bls.n	8000d7e <HAL_RCC_ClockConfig+0x106>
 8000d92:	e7e7      	b.n	8000d64 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d94:	f7ff fa24 	bl	80001e0 <HAL_GetTick>
 8000d98:	1bc0      	subs	r0, r0, r7
 8000d9a:	4540      	cmp	r0, r8
 8000d9c:	d8e2      	bhi.n	8000d64 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d9e:	6863      	ldr	r3, [r4, #4]
 8000da0:	f013 0f0c 	tst.w	r3, #12
 8000da4:	d1f6      	bne.n	8000d94 <HAL_RCC_ClockConfig+0x11c>
 8000da6:	e776      	b.n	8000c96 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da8:	6813      	ldr	r3, [r2, #0]
 8000daa:	f023 0307 	bic.w	r3, r3, #7
 8000dae:	4333      	orrs	r3, r6
 8000db0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000db2:	6813      	ldr	r3, [r2, #0]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	429e      	cmp	r6, r3
 8000dba:	d19c      	bne.n	8000cf6 <HAL_RCC_ClockConfig+0x7e>
 8000dbc:	e772      	b.n	8000ca4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dbe:	6863      	ldr	r3, [r4, #4]
 8000dc0:	68e9      	ldr	r1, [r5, #12]
 8000dc2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	6063      	str	r3, [r4, #4]
 8000dca:	e771      	b.n	8000cb0 <HAL_RCC_ClockConfig+0x38>
 8000dcc:	40022000 	.word	0x40022000
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	08002c31 	.word	0x08002c31
 8000dd8:	20000008 	.word	0x20000008

08000ddc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000de6:	5cd3      	ldrb	r3, [r2, r3]
 8000de8:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dea:	6810      	ldr	r0, [r2, #0]
}    
 8000dec:	40d8      	lsrs	r0, r3
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000
 8000df4:	08002c41 	.word	0x08002c41
 8000df8:	20000008 	.word	0x20000008

08000dfc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000e06:	5cd3      	ldrb	r3, [r2, r3]
 8000e08:	4a03      	ldr	r2, [pc, #12]	; (8000e18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e0a:	6810      	ldr	r0, [r2, #0]
} 
 8000e0c:	40d8      	lsrs	r0, r3
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000
 8000e14:	08002c41 	.word	0x08002c41
 8000e18:	20000008 	.word	0x20000008

08000e1c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e20:	6805      	ldr	r5, [r0, #0]
 8000e22:	68c2      	ldr	r2, [r0, #12]
 8000e24:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e26:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e30:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000e32:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e34:	430b      	orrs	r3, r1
 8000e36:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000e38:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000e3c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e40:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000e42:	4313      	orrs	r3, r2
 8000e44:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e46:	696b      	ldr	r3, [r5, #20]
 8000e48:	6982      	ldr	r2, [r0, #24]
 8000e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000e52:	4b40      	ldr	r3, [pc, #256]	; (8000f54 <UART_SetConfig+0x138>)
{
 8000e54:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000e56:	429d      	cmp	r5, r3
 8000e58:	f04f 0419 	mov.w	r4, #25
 8000e5c:	d146      	bne.n	8000eec <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000e5e:	f7ff ffcd 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 8000e62:	fb04 f300 	mul.w	r3, r4, r0
 8000e66:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000e6a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e6e:	00b6      	lsls	r6, r6, #2
 8000e70:	fbb3 f3f6 	udiv	r3, r3, r6
 8000e74:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e78:	011e      	lsls	r6, r3, #4
 8000e7a:	f7ff ffbf 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 8000e7e:	4360      	muls	r0, r4
 8000e80:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e8a:	f7ff ffb7 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 8000e8e:	4360      	muls	r0, r4
 8000e90:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e9a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e9e:	fb08 7313 	mls	r3, r8, r3, r7
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	3332      	adds	r3, #50	; 0x32
 8000ea6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000eaa:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000eae:	f7ff ffa5 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 8000eb2:	4360      	muls	r0, r4
 8000eb4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	fbb0 faf2 	udiv	sl, r0, r2
 8000ebe:	f7ff ff9d 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000ec2:	4360      	muls	r0, r4
 8000ec4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ece:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ed2:	fb08 a313 	mls	r3, r8, r3, sl
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	3332      	adds	r3, #50	; 0x32
 8000eda:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	433b      	orrs	r3, r7
 8000ee4:	4433      	add	r3, r6
 8000ee6:	60ab      	str	r3, [r5, #8]
 8000ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eec:	f7ff ff76 	bl	8000ddc <HAL_RCC_GetPCLK1Freq>
 8000ef0:	fb04 f300 	mul.w	r3, r4, r0
 8000ef4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000ef8:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000efc:	00b6      	lsls	r6, r6, #2
 8000efe:	fbb3 f3f6 	udiv	r3, r3, r6
 8000f02:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f06:	011e      	lsls	r6, r3, #4
 8000f08:	f7ff ff68 	bl	8000ddc <HAL_RCC_GetPCLK1Freq>
 8000f0c:	4360      	muls	r0, r4
 8000f0e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f18:	f7ff ff60 	bl	8000ddc <HAL_RCC_GetPCLK1Freq>
 8000f1c:	4360      	muls	r0, r4
 8000f1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f28:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f2c:	fb08 7313 	mls	r3, r8, r3, r7
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	3332      	adds	r3, #50	; 0x32
 8000f34:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f38:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000f3c:	f7ff ff4e 	bl	8000ddc <HAL_RCC_GetPCLK1Freq>
 8000f40:	4360      	muls	r0, r4
 8000f42:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	fbb0 faf2 	udiv	sl, r0, r2
 8000f4c:	f7ff ff46 	bl	8000ddc <HAL_RCC_GetPCLK1Freq>
 8000f50:	e7b7      	b.n	8000ec2 <UART_SetConfig+0xa6>
 8000f52:	bf00      	nop
 8000f54:	40013800 	.word	0x40013800

08000f58 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	460e      	mov	r6, r1
 8000f5e:	4617      	mov	r7, r2
 8000f60:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000f62:	6821      	ldr	r1, [r4, #0]
 8000f64:	680b      	ldr	r3, [r1, #0]
 8000f66:	ea36 0303 	bics.w	r3, r6, r3
 8000f6a:	d101      	bne.n	8000f70 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000f6c:	2000      	movs	r0, #0
}
 8000f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000f70:	1c6b      	adds	r3, r5, #1
 8000f72:	d0f7      	beq.n	8000f64 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f74:	b995      	cbnz	r5, 8000f9c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f76:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000f78:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f80:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	f022 0201 	bic.w	r2, r2, #1
 8000f88:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000f90:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000f94:	2300      	movs	r3, #0
 8000f96:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f9c:	f7ff f920 	bl	80001e0 <HAL_GetTick>
 8000fa0:	1bc0      	subs	r0, r0, r7
 8000fa2:	4285      	cmp	r5, r0
 8000fa4:	d2dd      	bcs.n	8000f62 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000fa6:	e7e6      	b.n	8000f76 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000fa8 <HAL_UART_Init>:
{
 8000fa8:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000faa:	4604      	mov	r4, r0
 8000fac:	b340      	cbz	r0, 8001000 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000fae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000fb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fb6:	b91b      	cbnz	r3, 8000fc0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000fb8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000fbc:	f000 fc8c 	bl	80018d8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000fc0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000fc2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000fc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000fc8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000fca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fd0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000fd2:	f7ff ff23 	bl	8000e1c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fd6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fd8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fe2:	695a      	ldr	r2, [r3, #20]
 8000fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fe8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ff0:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000ff2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ff4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000ff6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000ffa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000ffe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001000:	2001      	movs	r0, #1
}
 8001002:	bd10      	pop	{r4, pc}

08001004 <HAL_UART_Transmit>:
{
 8001004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001008:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800100a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800100e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001010:	2b20      	cmp	r3, #32
{
 8001012:	460d      	mov	r5, r1
 8001014:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001016:	d14e      	bne.n	80010b6 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001018:	2900      	cmp	r1, #0
 800101a:	d049      	beq.n	80010b0 <HAL_UART_Transmit+0xac>
 800101c:	2a00      	cmp	r2, #0
 800101e:	d047      	beq.n	80010b0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001020:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001024:	2b01      	cmp	r3, #1
 8001026:	d046      	beq.n	80010b6 <HAL_UART_Transmit+0xb2>
 8001028:	2301      	movs	r3, #1
 800102a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800102e:	2300      	movs	r3, #0
 8001030:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001032:	2321      	movs	r3, #33	; 0x21
 8001034:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001038:	f7ff f8d2 	bl	80001e0 <HAL_GetTick>
 800103c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800103e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001042:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001046:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001048:	b29b      	uxth	r3, r3
 800104a:	b96b      	cbnz	r3, 8001068 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4632      	mov	r2, r6
 8001050:	2140      	movs	r1, #64	; 0x40
 8001052:	4620      	mov	r0, r4
 8001054:	f7ff ff80 	bl	8000f58 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001058:	b9a8      	cbnz	r0, 8001086 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800105a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800105c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001060:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001068:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800106a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 800106c:	3b01      	subs	r3, #1
 800106e:	b29b      	uxth	r3, r3
 8001070:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001072:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001074:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800107a:	4620      	mov	r0, r4
 800107c:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800107e:	d10e      	bne.n	800109e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001080:	f7ff ff6a 	bl	8000f58 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001084:	b110      	cbz	r0, 800108c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001086:	2003      	movs	r0, #3
 8001088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800108c:	882b      	ldrh	r3, [r5, #0]
 800108e:	6822      	ldr	r2, [r4, #0]
 8001090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001094:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001096:	6923      	ldr	r3, [r4, #16]
 8001098:	b943      	cbnz	r3, 80010ac <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800109a:	3502      	adds	r5, #2
 800109c:	e7d3      	b.n	8001046 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800109e:	f7ff ff5b 	bl	8000f58 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	d1ef      	bne.n	8001086 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	782a      	ldrb	r2, [r5, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	3501      	adds	r5, #1
 80010ae:	e7ca      	b.n	8001046 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80010b0:	2001      	movs	r0, #1
 80010b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80010b6:	2002      	movs	r0, #2
}
 80010b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080010bc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80010bc:	b510      	push	{r4, lr}
 80010be:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart1,(uint8_t *)ptr, (uint16_t)len, 0xFFFFFFFF);
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	b292      	uxth	r2, r2
 80010c6:	4802      	ldr	r0, [pc, #8]	; (80010d0 <_write+0x14>)
 80010c8:	f7ff ff9c 	bl	8001004 <HAL_UART_Transmit>
	return len;
}
 80010cc:	4620      	mov	r0, r4
 80010ce:	bd10      	pop	{r4, pc}
 80010d0:	2000025c 	.word	0x2000025c

080010d4 <read_keypad>:

uint8_t key;


char read_keypad (void)
{
 80010d4:	b510      	push	{r4, lr}
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);  //Pull the R1 low
 80010d6:	2200      	movs	r2, #0
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	4898      	ldr	r0, [pc, #608]	; (800133c <read_keypad+0x268>)
 80010dc:	f7ff f9da 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 80010e0:	2201      	movs	r2, #1
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	4895      	ldr	r0, [pc, #596]	; (800133c <read_keypad+0x268>)
 80010e6:	f7ff f9d5 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 80010ea:	2201      	movs	r2, #1
 80010ec:	2120      	movs	r1, #32
 80010ee:	4893      	ldr	r0, [pc, #588]	; (800133c <read_keypad+0x268>)
 80010f0:	f7ff f9d0 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 80010f4:	2110      	movs	r1, #16
 80010f6:	4891      	ldr	r0, [pc, #580]	; (800133c <read_keypad+0x268>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	f7ff f9cb 	bl	8000494 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80010fe:	2110      	movs	r1, #16
 8001100:	488f      	ldr	r0, [pc, #572]	; (8001340 <read_keypad+0x26c>)
 8001102:	f7ff f9c1 	bl	8000488 <HAL_GPIO_ReadPin>
 8001106:	b940      	cbnz	r0, 800111a <read_keypad+0x46>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8001108:	4c8d      	ldr	r4, [pc, #564]	; (8001340 <read_keypad+0x26c>)
 800110a:	2110      	movs	r1, #16
 800110c:	4620      	mov	r0, r4
 800110e:	f7ff f9bb 	bl	8000488 <HAL_GPIO_ReadPin>
 8001112:	2800      	cmp	r0, #0
 8001114:	d0f9      	beq.n	800110a <read_keypad+0x36>
		return '1';
 8001116:	2031      	movs	r0, #49	; 0x31
 8001118:	bd10      	pop	{r4, pc}
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 800111a:	2120      	movs	r1, #32
 800111c:	4888      	ldr	r0, [pc, #544]	; (8001340 <read_keypad+0x26c>)
 800111e:	f7ff f9b3 	bl	8000488 <HAL_GPIO_ReadPin>
 8001122:	b940      	cbnz	r0, 8001136 <read_keypad+0x62>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 8001124:	4c86      	ldr	r4, [pc, #536]	; (8001340 <read_keypad+0x26c>)
 8001126:	2120      	movs	r1, #32
 8001128:	4620      	mov	r0, r4
 800112a:	f7ff f9ad 	bl	8000488 <HAL_GPIO_ReadPin>
 800112e:	2800      	cmp	r0, #0
 8001130:	d0f9      	beq.n	8001126 <read_keypad+0x52>
		return '2';
 8001132:	2032      	movs	r0, #50	; 0x32
 8001134:	bd10      	pop	{r4, pc}
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 8001136:	2102      	movs	r1, #2
 8001138:	4880      	ldr	r0, [pc, #512]	; (800133c <read_keypad+0x268>)
 800113a:	f7ff f9a5 	bl	8000488 <HAL_GPIO_ReadPin>
 800113e:	b940      	cbnz	r0, 8001152 <read_keypad+0x7e>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8001140:	4c7e      	ldr	r4, [pc, #504]	; (800133c <read_keypad+0x268>)
 8001142:	2102      	movs	r1, #2
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff f99f 	bl	8000488 <HAL_GPIO_ReadPin>
 800114a:	2800      	cmp	r0, #0
 800114c:	d0f9      	beq.n	8001142 <read_keypad+0x6e>
		return '3';
 800114e:	2033      	movs	r0, #51	; 0x33
 8001150:	bd10      	pop	{r4, pc}
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8001152:	2101      	movs	r1, #1
 8001154:	4879      	ldr	r0, [pc, #484]	; (800133c <read_keypad+0x268>)
 8001156:	f7ff f997 	bl	8000488 <HAL_GPIO_ReadPin>
 800115a:	b940      	cbnz	r0, 800116e <read_keypad+0x9a>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 800115c:	4c77      	ldr	r4, [pc, #476]	; (800133c <read_keypad+0x268>)
 800115e:	2101      	movs	r1, #1
 8001160:	4620      	mov	r0, r4
 8001162:	f7ff f991 	bl	8000488 <HAL_GPIO_ReadPin>
 8001166:	2800      	cmp	r0, #0
 8001168:	d0f9      	beq.n	800115e <read_keypad+0x8a>
		return 'A';
 800116a:	2041      	movs	r0, #65	; 0x41
 800116c:	bd10      	pop	{r4, pc}
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 800116e:	2201      	movs	r2, #1
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	4872      	ldr	r0, [pc, #456]	; (800133c <read_keypad+0x268>)
 8001174:	f7ff f98e 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);  // Pull the R2 High
 8001178:	2200      	movs	r2, #0
 800117a:	2140      	movs	r1, #64	; 0x40
 800117c:	486f      	ldr	r0, [pc, #444]	; (800133c <read_keypad+0x268>)
 800117e:	f7ff f989 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8001182:	2201      	movs	r2, #1
 8001184:	2120      	movs	r1, #32
 8001186:	486d      	ldr	r0, [pc, #436]	; (800133c <read_keypad+0x268>)
 8001188:	f7ff f984 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 800118c:	2110      	movs	r1, #16
 800118e:	486b      	ldr	r0, [pc, #428]	; (800133c <read_keypad+0x268>)
 8001190:	2201      	movs	r2, #1
 8001192:	f7ff f97f 	bl	8000494 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8001196:	2110      	movs	r1, #16
 8001198:	4869      	ldr	r0, [pc, #420]	; (8001340 <read_keypad+0x26c>)
 800119a:	f7ff f975 	bl	8000488 <HAL_GPIO_ReadPin>
 800119e:	b940      	cbnz	r0, 80011b2 <read_keypad+0xde>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80011a0:	4c67      	ldr	r4, [pc, #412]	; (8001340 <read_keypad+0x26c>)
 80011a2:	2110      	movs	r1, #16
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff f96f 	bl	8000488 <HAL_GPIO_ReadPin>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d0f9      	beq.n	80011a2 <read_keypad+0xce>
		return '4';
 80011ae:	2034      	movs	r0, #52	; 0x34
 80011b0:	bd10      	pop	{r4, pc}
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80011b2:	2120      	movs	r1, #32
 80011b4:	4862      	ldr	r0, [pc, #392]	; (8001340 <read_keypad+0x26c>)
 80011b6:	f7ff f967 	bl	8000488 <HAL_GPIO_ReadPin>
 80011ba:	b940      	cbnz	r0, 80011ce <read_keypad+0xfa>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80011bc:	4c60      	ldr	r4, [pc, #384]	; (8001340 <read_keypad+0x26c>)
 80011be:	2120      	movs	r1, #32
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff f961 	bl	8000488 <HAL_GPIO_ReadPin>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d0f9      	beq.n	80011be <read_keypad+0xea>
		return '5';
 80011ca:	2035      	movs	r0, #53	; 0x35
 80011cc:	bd10      	pop	{r4, pc}
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 80011ce:	2102      	movs	r1, #2
 80011d0:	485a      	ldr	r0, [pc, #360]	; (800133c <read_keypad+0x268>)
 80011d2:	f7ff f959 	bl	8000488 <HAL_GPIO_ReadPin>
 80011d6:	b940      	cbnz	r0, 80011ea <read_keypad+0x116>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 80011d8:	4c58      	ldr	r4, [pc, #352]	; (800133c <read_keypad+0x268>)
 80011da:	2102      	movs	r1, #2
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff f953 	bl	8000488 <HAL_GPIO_ReadPin>
 80011e2:	2800      	cmp	r0, #0
 80011e4:	d0f9      	beq.n	80011da <read_keypad+0x106>
		return '6';
 80011e6:	2036      	movs	r0, #54	; 0x36
 80011e8:	bd10      	pop	{r4, pc}
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 80011ea:	2101      	movs	r1, #1
 80011ec:	4853      	ldr	r0, [pc, #332]	; (800133c <read_keypad+0x268>)
 80011ee:	f7ff f94b 	bl	8000488 <HAL_GPIO_ReadPin>
 80011f2:	b940      	cbnz	r0, 8001206 <read_keypad+0x132>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 80011f4:	4c51      	ldr	r4, [pc, #324]	; (800133c <read_keypad+0x268>)
 80011f6:	2101      	movs	r1, #1
 80011f8:	4620      	mov	r0, r4
 80011fa:	f7ff f945 	bl	8000488 <HAL_GPIO_ReadPin>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d0f9      	beq.n	80011f6 <read_keypad+0x122>
		return 'B';
 8001202:	2042      	movs	r0, #66	; 0x42
 8001204:	bd10      	pop	{r4, pc}
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 8001206:	2201      	movs	r2, #1
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	484c      	ldr	r0, [pc, #304]	; (800133c <read_keypad+0x268>)
 800120c:	f7ff f942 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 8001210:	2201      	movs	r2, #1
 8001212:	2140      	movs	r1, #64	; 0x40
 8001214:	4849      	ldr	r0, [pc, #292]	; (800133c <read_keypad+0x268>)
 8001216:	f7ff f93d 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);  // Pull the R3 High
 800121a:	2200      	movs	r2, #0
 800121c:	2120      	movs	r1, #32
 800121e:	4847      	ldr	r0, [pc, #284]	; (800133c <read_keypad+0x268>)
 8001220:	f7ff f938 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 8001224:	2110      	movs	r1, #16
 8001226:	4845      	ldr	r0, [pc, #276]	; (800133c <read_keypad+0x268>)
 8001228:	2201      	movs	r2, #1
 800122a:	f7ff f933 	bl	8000494 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 800122e:	2110      	movs	r1, #16
 8001230:	4843      	ldr	r0, [pc, #268]	; (8001340 <read_keypad+0x26c>)
 8001232:	f7ff f929 	bl	8000488 <HAL_GPIO_ReadPin>
 8001236:	b940      	cbnz	r0, 800124a <read_keypad+0x176>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8001238:	4c41      	ldr	r4, [pc, #260]	; (8001340 <read_keypad+0x26c>)
 800123a:	2110      	movs	r1, #16
 800123c:	4620      	mov	r0, r4
 800123e:	f7ff f923 	bl	8000488 <HAL_GPIO_ReadPin>
 8001242:	2800      	cmp	r0, #0
 8001244:	d0f9      	beq.n	800123a <read_keypad+0x166>
		return '7';
 8001246:	2037      	movs	r0, #55	; 0x37
 8001248:	bd10      	pop	{r4, pc}
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 800124a:	2120      	movs	r1, #32
 800124c:	483c      	ldr	r0, [pc, #240]	; (8001340 <read_keypad+0x26c>)
 800124e:	f7ff f91b 	bl	8000488 <HAL_GPIO_ReadPin>
 8001252:	b940      	cbnz	r0, 8001266 <read_keypad+0x192>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 8001254:	4c3a      	ldr	r4, [pc, #232]	; (8001340 <read_keypad+0x26c>)
 8001256:	2120      	movs	r1, #32
 8001258:	4620      	mov	r0, r4
 800125a:	f7ff f915 	bl	8000488 <HAL_GPIO_ReadPin>
 800125e:	2800      	cmp	r0, #0
 8001260:	d0f9      	beq.n	8001256 <read_keypad+0x182>
		return '8';
 8001262:	2038      	movs	r0, #56	; 0x38
 8001264:	bd10      	pop	{r4, pc}
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 8001266:	2102      	movs	r1, #2
 8001268:	4834      	ldr	r0, [pc, #208]	; (800133c <read_keypad+0x268>)
 800126a:	f7ff f90d 	bl	8000488 <HAL_GPIO_ReadPin>
 800126e:	b940      	cbnz	r0, 8001282 <read_keypad+0x1ae>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8001270:	4c32      	ldr	r4, [pc, #200]	; (800133c <read_keypad+0x268>)
 8001272:	2102      	movs	r1, #2
 8001274:	4620      	mov	r0, r4
 8001276:	f7ff f907 	bl	8000488 <HAL_GPIO_ReadPin>
 800127a:	2800      	cmp	r0, #0
 800127c:	d0f9      	beq.n	8001272 <read_keypad+0x19e>
		return '9';
 800127e:	2039      	movs	r0, #57	; 0x39
 8001280:	bd10      	pop	{r4, pc}
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8001282:	2101      	movs	r1, #1
 8001284:	482d      	ldr	r0, [pc, #180]	; (800133c <read_keypad+0x268>)
 8001286:	f7ff f8ff 	bl	8000488 <HAL_GPIO_ReadPin>
 800128a:	b940      	cbnz	r0, 800129e <read_keypad+0x1ca>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 800128c:	4c2b      	ldr	r4, [pc, #172]	; (800133c <read_keypad+0x268>)
 800128e:	2101      	movs	r1, #1
 8001290:	4620      	mov	r0, r4
 8001292:	f7ff f8f9 	bl	8000488 <HAL_GPIO_ReadPin>
 8001296:	2800      	cmp	r0, #0
 8001298:	d0f9      	beq.n	800128e <read_keypad+0x1ba>
		return 'C';
 800129a:	2043      	movs	r0, #67	; 0x43
 800129c:	bd10      	pop	{r4, pc}
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 800129e:	2201      	movs	r2, #1
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	4826      	ldr	r0, [pc, #152]	; (800133c <read_keypad+0x268>)
 80012a4:	f7ff f8f6 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 80012a8:	2201      	movs	r2, #1
 80012aa:	2140      	movs	r1, #64	; 0x40
 80012ac:	4823      	ldr	r0, [pc, #140]	; (800133c <read_keypad+0x268>)
 80012ae:	f7ff f8f1 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 80012b2:	2201      	movs	r2, #1
 80012b4:	2120      	movs	r1, #32
 80012b6:	4821      	ldr	r0, [pc, #132]	; (800133c <read_keypad+0x268>)
 80012b8:	f7ff f8ec 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);  // Pull the R4 High
 80012bc:	2110      	movs	r1, #16
 80012be:	481f      	ldr	r0, [pc, #124]	; (800133c <read_keypad+0x268>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f7ff f8e7 	bl	8000494 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80012c6:	2110      	movs	r1, #16
 80012c8:	481d      	ldr	r0, [pc, #116]	; (8001340 <read_keypad+0x26c>)
 80012ca:	f7ff f8dd 	bl	8000488 <HAL_GPIO_ReadPin>
 80012ce:	b940      	cbnz	r0, 80012e2 <read_keypad+0x20e>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80012d0:	4c1b      	ldr	r4, [pc, #108]	; (8001340 <read_keypad+0x26c>)
 80012d2:	2110      	movs	r1, #16
 80012d4:	4620      	mov	r0, r4
 80012d6:	f7ff f8d7 	bl	8000488 <HAL_GPIO_ReadPin>
 80012da:	2800      	cmp	r0, #0
 80012dc:	d0f9      	beq.n	80012d2 <read_keypad+0x1fe>
		return '*';
 80012de:	202a      	movs	r0, #42	; 0x2a
 80012e0:	bd10      	pop	{r4, pc}
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80012e2:	2120      	movs	r1, #32
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <read_keypad+0x26c>)
 80012e6:	f7ff f8cf 	bl	8000488 <HAL_GPIO_ReadPin>
 80012ea:	b940      	cbnz	r0, 80012fe <read_keypad+0x22a>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80012ec:	4c14      	ldr	r4, [pc, #80]	; (8001340 <read_keypad+0x26c>)
 80012ee:	2120      	movs	r1, #32
 80012f0:	4620      	mov	r0, r4
 80012f2:	f7ff f8c9 	bl	8000488 <HAL_GPIO_ReadPin>
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d0f9      	beq.n	80012ee <read_keypad+0x21a>
		return '0';
 80012fa:	2030      	movs	r0, #48	; 0x30
 80012fc:	bd10      	pop	{r4, pc}
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 80012fe:	2102      	movs	r1, #2
 8001300:	480e      	ldr	r0, [pc, #56]	; (800133c <read_keypad+0x268>)
 8001302:	f7ff f8c1 	bl	8000488 <HAL_GPIO_ReadPin>
 8001306:	b940      	cbnz	r0, 800131a <read_keypad+0x246>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8001308:	4c0c      	ldr	r4, [pc, #48]	; (800133c <read_keypad+0x268>)
 800130a:	2102      	movs	r1, #2
 800130c:	4620      	mov	r0, r4
 800130e:	f7ff f8bb 	bl	8000488 <HAL_GPIO_ReadPin>
 8001312:	2800      	cmp	r0, #0
 8001314:	d0f9      	beq.n	800130a <read_keypad+0x236>
		return '#';
 8001316:	2023      	movs	r0, #35	; 0x23
 8001318:	bd10      	pop	{r4, pc}
	}
	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 800131a:	2101      	movs	r1, #1
 800131c:	4807      	ldr	r0, [pc, #28]	; (800133c <read_keypad+0x268>)
 800131e:	f7ff f8b3 	bl	8000488 <HAL_GPIO_ReadPin>
 8001322:	b940      	cbnz	r0, 8001336 <read_keypad+0x262>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8001324:	4c05      	ldr	r4, [pc, #20]	; (800133c <read_keypad+0x268>)
 8001326:	2101      	movs	r1, #1
 8001328:	4620      	mov	r0, r4
 800132a:	f7ff f8ad 	bl	8000488 <HAL_GPIO_ReadPin>
 800132e:	2800      	cmp	r0, #0
 8001330:	d0f9      	beq.n	8001326 <read_keypad+0x252>
		return 'D';
 8001332:	2044      	movs	r0, #68	; 0x44
 8001334:	bd10      	pop	{r4, pc}
	}

	return 0x01;
 8001336:	2001      	movs	r0, #1
}
 8001338:	bd10      	pop	{r4, pc}
 800133a:	bf00      	nop
 800133c:	40010800 	.word	0x40010800
 8001340:	40010c00 	.word	0x40010c00

08001344 <LCD_DATA>:
#define RS0_EN1   0x04
#define RS0_EN0   0x00
#define BackLight 0x08

// RS-Q0 / RW-Q1 / EN-Q2 / BackLight-Q3 / D4-Q4 / D5-Q5 / D6-Q6 / D7-Q7
void LCD_DATA(uint8_t data) {
 8001344:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001348:	4604      	mov	r4, r0
  uint8_t temp=(data & 0xF0)|RS1_EN1|BackLight;
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 800134a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
  uint8_t temp=(data & 0xF0)|RS1_EN1|BackLight;
 800134e:	f020 060f 	bic.w	r6, r0, #15
 8001352:	b276      	sxtb	r6, r6
 8001354:	f046 030d 	orr.w	r3, r6, #13
 8001358:	ad04      	add	r5, sp, #16
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 800135a:	4f21      	ldr	r7, [pc, #132]	; (80013e0 <LCD_DATA+0x9c>)
  uint8_t temp=(data & 0xF0)|RS1_EN1|BackLight;
 800135c:	f805 3d01 	strb.w	r3, [r5, #-1]!
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001360:	f8cd 8000 	str.w	r8, [sp]
 8001364:	2301      	movs	r3, #1
 8001366:	462a      	mov	r2, r5
 8001368:	214e      	movs	r1, #78	; 0x4e
 800136a:	4638      	mov	r0, r7
 800136c:	f7ff f9e6 	bl	800073c <HAL_I2C_Master_Transmit>
 8001370:	2800      	cmp	r0, #0
 8001372:	d1f5      	bne.n	8001360 <LCD_DATA+0x1c>
  temp=(data & 0xF0)|RS1_EN0|BackLight;
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001374:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  temp=(data & 0xF0)|RS1_EN0|BackLight;
 8001378:	f046 0609 	orr.w	r6, r6, #9
 800137c:	f88d 600f 	strb.w	r6, [sp, #15]
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001380:	4e17      	ldr	r6, [pc, #92]	; (80013e0 <LCD_DATA+0x9c>)
 8001382:	9700      	str	r7, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	462a      	mov	r2, r5
 8001388:	214e      	movs	r1, #78	; 0x4e
 800138a:	4630      	mov	r0, r6
 800138c:	f7ff f9d6 	bl	800073c <HAL_I2C_Master_Transmit>
 8001390:	2800      	cmp	r0, #0
 8001392:	d1f6      	bne.n	8001382 <LCD_DATA+0x3e>
  delay_us(4);

  temp=((data << 4) & 0xF0)|RS1_EN1|BackLight;
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001394:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  temp=((data << 4) & 0xF0)|RS1_EN1|BackLight;
 8001398:	0124      	lsls	r4, r4, #4
 800139a:	b264      	sxtb	r4, r4
 800139c:	f044 030d 	orr.w	r3, r4, #13
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80013a0:	4e0f      	ldr	r6, [pc, #60]	; (80013e0 <LCD_DATA+0x9c>)
  temp=((data << 4) & 0xF0)|RS1_EN1|BackLight;
 80013a2:	f88d 300f 	strb.w	r3, [sp, #15]
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80013a6:	9700      	str	r7, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	462a      	mov	r2, r5
 80013ac:	214e      	movs	r1, #78	; 0x4e
 80013ae:	4630      	mov	r0, r6
 80013b0:	f7ff f9c4 	bl	800073c <HAL_I2C_Master_Transmit>
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d1f6      	bne.n	80013a6 <LCD_DATA+0x62>
  temp = ((data << 4) & 0xF0)|RS1_EN0|BackLight;
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80013b8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  temp = ((data << 4) & 0xF0)|RS1_EN0|BackLight;
 80013bc:	f044 0409 	orr.w	r4, r4, #9
 80013c0:	f88d 400f 	strb.w	r4, [sp, #15]
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80013c4:	4c06      	ldr	r4, [pc, #24]	; (80013e0 <LCD_DATA+0x9c>)
 80013c6:	9600      	str	r6, [sp, #0]
 80013c8:	2301      	movs	r3, #1
 80013ca:	462a      	mov	r2, r5
 80013cc:	214e      	movs	r1, #78	; 0x4e
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff f9b4 	bl	800073c <HAL_I2C_Master_Transmit>
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d1f6      	bne.n	80013c6 <LCD_DATA+0x82>
  delay_us(50);
}
 80013d8:	b004      	add	sp, #16
 80013da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013de:	bf00      	nop
 80013e0:	20000208 	.word	0x20000208

080013e4 <LCD_CMD>:

void LCD_CMD(uint8_t cmd) {
 80013e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80013e8:	4604      	mov	r4, r0
  uint8_t temp=(cmd & 0xF0)|RS0_EN1|BackLight;
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80013ea:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
  uint8_t temp=(cmd & 0xF0)|RS0_EN1|BackLight;
 80013ee:	f020 060f 	bic.w	r6, r0, #15
 80013f2:	b276      	sxtb	r6, r6
 80013f4:	f046 030c 	orr.w	r3, r6, #12
 80013f8:	ad04      	add	r5, sp, #16
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80013fa:	4f21      	ldr	r7, [pc, #132]	; (8001480 <LCD_CMD+0x9c>)
  uint8_t temp=(cmd & 0xF0)|RS0_EN1|BackLight;
 80013fc:	f805 3d01 	strb.w	r3, [r5, #-1]!
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001400:	f8cd 8000 	str.w	r8, [sp]
 8001404:	2301      	movs	r3, #1
 8001406:	462a      	mov	r2, r5
 8001408:	214e      	movs	r1, #78	; 0x4e
 800140a:	4638      	mov	r0, r7
 800140c:	f7ff f996 	bl	800073c <HAL_I2C_Master_Transmit>
 8001410:	2800      	cmp	r0, #0
 8001412:	d1f5      	bne.n	8001400 <LCD_CMD+0x1c>
  temp=(cmd & 0xF0)|RS0_EN0|BackLight;
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001414:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  temp=(cmd & 0xF0)|RS0_EN0|BackLight;
 8001418:	f046 0608 	orr.w	r6, r6, #8
 800141c:	f88d 600f 	strb.w	r6, [sp, #15]
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001420:	4e17      	ldr	r6, [pc, #92]	; (8001480 <LCD_CMD+0x9c>)
 8001422:	9700      	str	r7, [sp, #0]
 8001424:	2301      	movs	r3, #1
 8001426:	462a      	mov	r2, r5
 8001428:	214e      	movs	r1, #78	; 0x4e
 800142a:	4630      	mov	r0, r6
 800142c:	f7ff f986 	bl	800073c <HAL_I2C_Master_Transmit>
 8001430:	2800      	cmp	r0, #0
 8001432:	d1f6      	bne.n	8001422 <LCD_CMD+0x3e>
  delay_us(4);

  temp=((cmd << 4) & 0xF0)|RS0_EN1|BackLight;
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001434:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  temp=((cmd << 4) & 0xF0)|RS0_EN1|BackLight;
 8001438:	0124      	lsls	r4, r4, #4
 800143a:	b264      	sxtb	r4, r4
 800143c:	f044 030c 	orr.w	r3, r4, #12
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001440:	4e0f      	ldr	r6, [pc, #60]	; (8001480 <LCD_CMD+0x9c>)
  temp=((cmd << 4) & 0xF0)|RS0_EN1|BackLight;
 8001442:	f88d 300f 	strb.w	r3, [sp, #15]
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001446:	9700      	str	r7, [sp, #0]
 8001448:	2301      	movs	r3, #1
 800144a:	462a      	mov	r2, r5
 800144c:	214e      	movs	r1, #78	; 0x4e
 800144e:	4630      	mov	r0, r6
 8001450:	f7ff f974 	bl	800073c <HAL_I2C_Master_Transmit>
 8001454:	2800      	cmp	r0, #0
 8001456:	d1f6      	bne.n	8001446 <LCD_CMD+0x62>
  temp=((cmd << 4) & 0xF0)|RS0_EN0|BackLight;
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001458:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  temp=((cmd << 4) & 0xF0)|RS0_EN0|BackLight;
 800145c:	f044 0408 	orr.w	r4, r4, #8
 8001460:	f88d 400f 	strb.w	r4, [sp, #15]
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001464:	4c06      	ldr	r4, [pc, #24]	; (8001480 <LCD_CMD+0x9c>)
 8001466:	9600      	str	r6, [sp, #0]
 8001468:	2301      	movs	r3, #1
 800146a:	462a      	mov	r2, r5
 800146c:	214e      	movs	r1, #78	; 0x4e
 800146e:	4620      	mov	r0, r4
 8001470:	f7ff f964 	bl	800073c <HAL_I2C_Master_Transmit>
 8001474:	2800      	cmp	r0, #0
 8001476:	d1f6      	bne.n	8001466 <LCD_CMD+0x82>
  delay_us(50);
}
 8001478:	b004      	add	sp, #16
 800147a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800147e:	bf00      	nop
 8001480:	20000208 	.word	0x20000208

08001484 <LCD_CMD_4bit>:

void LCD_CMD_4bit(uint8_t cmd) {
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t temp=((cmd << 4) & 0xF0)|RS0_EN1|BackLight;
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001486:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  uint8_t temp=((cmd << 4) & 0xF0)|RS0_EN1|BackLight;
 800148a:	0100      	lsls	r0, r0, #4
void LCD_CMD_4bit(uint8_t cmd) {
 800148c:	b085      	sub	sp, #20
  uint8_t temp=((cmd << 4) & 0xF0)|RS0_EN1|BackLight;
 800148e:	b244      	sxtb	r4, r0
 8001490:	f044 030c 	orr.w	r3, r4, #12
 8001494:	ad04      	add	r5, sp, #16
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8001496:	4e0f      	ldr	r6, [pc, #60]	; (80014d4 <LCD_CMD_4bit+0x50>)
  uint8_t temp=((cmd << 4) & 0xF0)|RS0_EN1|BackLight;
 8001498:	f805 3d01 	strb.w	r3, [r5, #-1]!
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 800149c:	9700      	str	r7, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	462a      	mov	r2, r5
 80014a2:	214e      	movs	r1, #78	; 0x4e
 80014a4:	4630      	mov	r0, r6
 80014a6:	f7ff f949 	bl	800073c <HAL_I2C_Master_Transmit>
 80014aa:	2800      	cmp	r0, #0
 80014ac:	d1f6      	bne.n	800149c <LCD_CMD_4bit+0x18>
  temp=((cmd << 4) & 0xF0)|RS0_EN0|BackLight;
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80014ae:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  temp=((cmd << 4) & 0xF0)|RS0_EN0|BackLight;
 80014b2:	f044 0408 	orr.w	r4, r4, #8
 80014b6:	f88d 400f 	strb.w	r4, [sp, #15]
  while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80014ba:	4c06      	ldr	r4, [pc, #24]	; (80014d4 <LCD_CMD_4bit+0x50>)
 80014bc:	9600      	str	r6, [sp, #0]
 80014be:	2301      	movs	r3, #1
 80014c0:	462a      	mov	r2, r5
 80014c2:	214e      	movs	r1, #78	; 0x4e
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff f939 	bl	800073c <HAL_I2C_Master_Transmit>
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d1f6      	bne.n	80014bc <LCD_CMD_4bit+0x38>
  delay_us(50);
}
 80014ce:	b005      	add	sp, #20
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000208 	.word	0x20000208

080014d8 <LCD_INIT>:

void LCD_INIT(void) {
 80014d8:	b508      	push	{r3, lr}
  delay_ms(100);
 80014da:	2064      	movs	r0, #100	; 0x64
 80014dc:	f7fe fe86 	bl	80001ec <HAL_Delay>

  LCD_CMD_4bit(0x03); delay_ms(5);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f7ff ffcf 	bl	8001484 <LCD_CMD_4bit>
 80014e6:	2005      	movs	r0, #5
 80014e8:	f7fe fe80 	bl	80001ec <HAL_Delay>
  LCD_CMD_4bit(0x03); delay_us(100);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f7ff ffc9 	bl	8001484 <LCD_CMD_4bit>
  LCD_CMD_4bit(0x03); delay_us(100);
 80014f2:	2003      	movs	r0, #3
 80014f4:	f7ff ffc6 	bl	8001484 <LCD_CMD_4bit>
  LCD_CMD_4bit(0x02); delay_us(100);
 80014f8:	2002      	movs	r0, #2
 80014fa:	f7ff ffc3 	bl	8001484 <LCD_CMD_4bit>
  LCD_CMD(0x28);  // 4 bits, 2 line, 5x8 font
 80014fe:	2028      	movs	r0, #40	; 0x28
 8001500:	f7ff ff70 	bl	80013e4 <LCD_CMD>
  LCD_CMD(0x08);  // display off, cursor off, blink off
 8001504:	2008      	movs	r0, #8
 8001506:	f7ff ff6d 	bl	80013e4 <LCD_CMD>
  LCD_CMD(0x01);  // clear display
 800150a:	2001      	movs	r0, #1
 800150c:	f7ff ff6a 	bl	80013e4 <LCD_CMD>
  delay_ms(3);
 8001510:	2003      	movs	r0, #3
 8001512:	f7fe fe6b 	bl	80001ec <HAL_Delay>
  LCD_CMD(0x06);  // cursor movint direction
 8001516:	2006      	movs	r0, #6
 8001518:	f7ff ff64 	bl	80013e4 <LCD_CMD>
  LCD_CMD(0x0C);  // display on, cursor off, blink off
}
 800151c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_CMD(0x0C);  // display on, cursor off, blink off
 8001520:	200c      	movs	r0, #12
 8001522:	f7ff bf5f 	b.w	80013e4 <LCD_CMD>

08001526 <LCD_CLEAR>:
  else if (y == 1) LCD_CMD(0xC0 + x);
  else if (y == 2) LCD_CMD(0x94 + x);
  else if (y == 3) LCD_CMD(0xD4 + x);
}

void LCD_CLEAR(void) {
 8001526:	b508      	push	{r3, lr}
  LCD_CMD(0x01);
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff ff5b 	bl	80013e4 <LCD_CMD>
  delay_ms(2);
}
 800152e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay_ms(2);
 8001532:	2002      	movs	r0, #2
 8001534:	f7fe be5a 	b.w	80001ec <HAL_Delay>

08001538 <LCD_PUTS>:

void LCD_PUTS(char *str) {
 8001538:	b510      	push	{r4, lr}
 800153a:	1e44      	subs	r4, r0, #1
  while (*str) LCD_DATA(*str++);
 800153c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001540:	b900      	cbnz	r0, 8001544 <LCD_PUTS+0xc>
}
 8001542:	bd10      	pop	{r4, pc}
  while (*str) LCD_DATA(*str++);
 8001544:	f7ff fefe 	bl	8001344 <LCD_DATA>
 8001548:	e7f8      	b.n	800153c <LCD_PUTS+0x4>

0800154a <append>:

void append(char* s, char c) {
 800154a:	b538      	push	{r3, r4, r5, lr}
 800154c:	4604      	mov	r4, r0
 800154e:	460d      	mov	r5, r1
        int len = strlen(s);
 8001550:	f7fe fdfc 	bl	800014c <strlen>
        s[len] = c;
        s[len+1] = '\0';
 8001554:	2300      	movs	r3, #0
        s[len] = c;
 8001556:	5425      	strb	r5, [r4, r0]
        s[len+1] = '\0';
 8001558:	4404      	add	r4, r0
 800155a:	7063      	strb	r3, [r4, #1]
 800155c:	bd38      	pop	{r3, r4, r5, pc}

0800155e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155e:	b510      	push	{r4, lr}
 8001560:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	2228      	movs	r2, #40	; 0x28
 8001564:	2100      	movs	r1, #0
 8001566:	a806      	add	r0, sp, #24
 8001568:	f000 faaa 	bl	8001ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800156c:	2100      	movs	r1, #0
 800156e:	2214      	movs	r2, #20
 8001570:	a801      	add	r0, sp, #4
 8001572:	f000 faa5 	bl	8001ac0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800157a:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800157e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001580:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001582:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001586:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001588:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800158c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158e:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001590:	f7ff f9aa 	bl	80008e8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001594:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001596:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159c:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800159e:	4621      	mov	r1, r4
 80015a0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a2:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a6:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a8:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015aa:	f7ff fb65 	bl	8000c78 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80015ae:	b010      	add	sp, #64	; 0x40
 80015b0:	bd10      	pop	{r4, pc}
	...

080015b4 <main>:
{
 80015b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    num1[0] = '\0';
 80015b8:	2400      	movs	r4, #0
{
 80015ba:	b0a6      	sub	sp, #152	; 0x98
    num1[0] = '\0';
 80015bc:	f88d 4010 	strb.w	r4, [sp, #16]
	num2[0] = '\0';
 80015c0:	f88d 401c 	strb.w	r4, [sp, #28]
	op2[0] = '\0';
 80015c4:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
  HAL_Init();
 80015c8:	f7fe fdec 	bl	80001a4 <HAL_Init>
  printf(" Hello Test \r\n");
 80015cc:	4888      	ldr	r0, [pc, #544]	; (80017f0 <main+0x23c>)
 80015ce:	f000 fadb 	bl	8001b88 <puts>
  SystemClock_Config();
 80015d2:	f7ff ffc4 	bl	800155e <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	2210      	movs	r2, #16
 80015d8:	4621      	mov	r1, r4
 80015da:	a80d      	add	r0, sp, #52	; 0x34
 80015dc:	f000 fa70 	bl	8001ac0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e0:	4b84      	ldr	r3, [pc, #528]	; (80017f4 <main+0x240>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80015e2:	21f0      	movs	r1, #240	; 0xf0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80015e6:	4884      	ldr	r0, [pc, #528]	; (80017f8 <main+0x244>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e8:	f042 0220 	orr.w	r2, r2, #32
 80015ec:	619a      	str	r2, [r3, #24]
 80015ee:	699a      	ldr	r2, [r3, #24]
    uint8_t final = 0;
 80015f0:	46a1      	mov	r9, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f2:	f002 0220 	and.w	r2, r2, #32
 80015f6:	9201      	str	r2, [sp, #4]
 80015f8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	699a      	ldr	r2, [r3, #24]
    uint8_t presentValue = 0;
 80015fc:	46a0      	mov	r8, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	f042 0204 	orr.w	r2, r2, #4
 8001602:	619a      	str	r2, [r3, #24]
 8001604:	699a      	ldr	r2, [r3, #24]
	int sum = 0;
 8001606:	4625      	mov	r5, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	f002 0204 	and.w	r2, r2, #4
 800160c:	9202      	str	r2, [sp, #8]
 800160e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	699a      	ldr	r2, [r3, #24]
				num1[0] = '\0';
 8001612:	46a2      	mov	sl, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	f042 0208 	orr.w	r2, r2, #8
 8001618:	619a      	str	r2, [r3, #24]
 800161a:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800161c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	9303      	str	r3, [sp, #12]
 8001624:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001626:	f7fe ff35 	bl	8000494 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800162a:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	a90d      	add	r1, sp, #52	; 0x34
 800162e:	4872      	ldr	r0, [pc, #456]	; (80017f8 <main+0x244>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001630:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001632:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f7fe fe47 	bl	80002c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800163a:	23f0      	movs	r3, #240	; 0xf0
 800163c:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	a90d      	add	r1, sp, #52	; 0x34
 8001646:	486c      	ldr	r0, [pc, #432]	; (80017f8 <main+0x244>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f7fe fe3c 	bl	80002c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001650:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	a90d      	add	r1, sp, #52	; 0x34
 8001654:	4869      	ldr	r0, [pc, #420]	; (80017fc <main+0x248>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001656:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f7fe fe34 	bl	80002c8 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001660:	4867      	ldr	r0, [pc, #412]	; (8001800 <main+0x24c>)
  hi2c1.Init.ClockSpeed = 100000;
 8001662:	4a68      	ldr	r2, [pc, #416]	; (8001804 <main+0x250>)
 8001664:	4b68      	ldr	r3, [pc, #416]	; (8001808 <main+0x254>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001666:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8001668:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001670:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001672:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001674:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001676:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001678:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167a:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800167c:	f7fe ffde 	bl	800063c <HAL_I2C_Init>
  huart1.Init.BaudRate = 115200;
 8001680:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001684:	4861      	ldr	r0, [pc, #388]	; (800180c <main+0x258>)
  huart1.Init.BaudRate = 115200;
 8001686:	4962      	ldr	r1, [pc, #392]	; (8001810 <main+0x25c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001688:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 800168a:	e880 000a 	stmia.w	r0, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800168e:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001692:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001694:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800169a:	f7ff fc85 	bl	8000fa8 <HAL_UART_Init>
  LCD_INIT();
 800169e:	f7ff ff1b 	bl	80014d8 <LCD_INIT>
	  	key = read_keypad ();
 80016a2:	f7ff fd17 	bl	80010d4 <read_keypad>
 80016a6:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <main+0x260>)
	  	if (key!=0x01)
 80016a8:	2801      	cmp	r0, #1
	  	key = read_keypad ();
 80016aa:	4601      	mov	r1, r0
 80016ac:	7018      	strb	r0, [r3, #0]
	  	if (key!=0x01)
 80016ae:	d013      	beq.n	80016d8 <main+0x124>
	  		if(s1 == '1' || s1 =='2' || s1 =='3'|| s1 =='4'|| s1 =='5'|| s1 =='6'|| s1 =='7'|| s1 =='8'|| s1 =='9'|| s1 =='0')
 80016b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d827      	bhi.n	8001708 <main+0x154>
	  			if(presentValue != 1)
 80016b8:	f1b8 0f00 	cmp.w	r8, #0
 80016bc:	d110      	bne.n	80016e0 <main+0x12c>
	  				append(num1, s1);
 80016be:	a804      	add	r0, sp, #16
 80016c0:	f7ff ff43 	bl	800154a <append>
  if      (y == 0) LCD_CMD(0x80 + x);
 80016c4:	2080      	movs	r0, #128	; 0x80
 80016c6:	f7ff fe8d 	bl	80013e4 <LCD_CMD>
	  				LCD_PUTS(num1);
 80016ca:	a804      	add	r0, sp, #16
 80016cc:	f7ff ff34 	bl	8001538 <LCD_PUTS>
	  				numLength = strlen(num1);
 80016d0:	a804      	add	r0, sp, #16
 80016d2:	f7fe fd3b 	bl	800014c <strlen>
 80016d6:	b2c6      	uxtb	r6, r0
	  	  HAL_Delay(200);
 80016d8:	20c8      	movs	r0, #200	; 0xc8
 80016da:	f7fe fd87 	bl	80001ec <HAL_Delay>
	  	key = read_keypad ();
 80016de:	e7e0      	b.n	80016a2 <main+0xee>
	  				append(num2, s1);
 80016e0:	a807      	add	r0, sp, #28
 80016e2:	f7ff ff32 	bl	800154a <append>
	  				if(count == 0)
 80016e6:	b924      	cbnz	r4, 80016f2 <main+0x13e>
						numLength = numLength + strlen(num2);
 80016e8:	a807      	add	r0, sp, #28
 80016ea:	f7fe fd2f 	bl	800014c <strlen>
 80016ee:	4406      	add	r6, r0
 80016f0:	b2f6      	uxtb	r6, r6
					LCD_PUTS(num2);
 80016f2:	2401      	movs	r4, #1
  if      (y == 0) LCD_CMD(0x80 + x);
 80016f4:	f1a6 0080 	sub.w	r0, r6, #128	; 0x80
 80016f8:	b2c0      	uxtb	r0, r0
 80016fa:	f7ff fe73 	bl	80013e4 <LCD_CMD>
					LCD_PUTS(num2);
 80016fe:	a807      	add	r0, sp, #28
 8001700:	f7ff ff1a 	bl	8001538 <LCD_PUTS>
	  				final = 1;
 8001704:	46a1      	mov	r9, r4
 8001706:	e7e7      	b.n	80016d8 <main+0x124>
	  		}else if(presentValue == 0 && (s1 == 'A'|| s1 =='B' || s1 =='C'|| s1 =='D'))
 8001708:	f1b8 0f00 	cmp.w	r8, #0
 800170c:	d122      	bne.n	8001754 <main+0x1a0>
 800170e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8001712:	2b03      	cmp	r3, #3
 8001714:	d81e      	bhi.n	8001754 <main+0x1a0>
	  			if(s1 == 'A')
 8001716:	2841      	cmp	r0, #65	; 0x41
 8001718:	d018      	beq.n	800174c <main+0x198>
	  			}else if (s1 == 'B'){
 800171a:	2842      	cmp	r0, #66	; 0x42
 800171c:	d018      	beq.n	8001750 <main+0x19c>
	  				op = '+';
 800171e:	2843      	cmp	r0, #67	; 0x43
 8001720:	bf0c      	ite	eq
 8001722:	272d      	moveq	r7, #45	; 0x2d
 8001724:	272b      	movne	r7, #43	; 0x2b
	  			append(op2, op);
 8001726:	4639      	mov	r1, r7
 8001728:	a80a      	add	r0, sp, #40	; 0x28
 800172a:	f7ff ff0e 	bl	800154a <append>
	  			numLength = numLength + strlen(op);
 800172e:	4638      	mov	r0, r7
 8001730:	f7fe fd0c 	bl	800014c <strlen>
 8001734:	4406      	add	r6, r0
 8001736:	b2f6      	uxtb	r6, r6
  if      (y == 0) LCD_CMD(0x80 + x);
 8001738:	f086 0080 	eor.w	r0, r6, #128	; 0x80
 800173c:	f7ff fe52 	bl	80013e4 <LCD_CMD>
				LCD_PUTS(op2);
 8001740:	a80a      	add	r0, sp, #40	; 0x28
 8001742:	f7ff fef9 	bl	8001538 <LCD_PUTS>
				presentValue = 1;
 8001746:	f04f 0801 	mov.w	r8, #1
	  		{
 800174a:	e7c5      	b.n	80016d8 <main+0x124>
	  				op = '*';
 800174c:	272a      	movs	r7, #42	; 0x2a
 800174e:	e7ea      	b.n	8001726 <main+0x172>
	  				op = '/';
 8001750:	272f      	movs	r7, #47	; 0x2f
 8001752:	e7e8      	b.n	8001726 <main+0x172>
	  		}else if(final == 1 && s1 == '#')
 8001754:	f1b9 0f00 	cmp.w	r9, #0
 8001758:	d039      	beq.n	80017ce <main+0x21a>
 800175a:	2923      	cmp	r1, #35	; 0x23
 800175c:	d137      	bne.n	80017ce <main+0x21a>
	  			if (op == '+'){
 800175e:	2f2b      	cmp	r7, #43	; 0x2b
 8001760:	d113      	bne.n	800178a <main+0x1d6>
	  					sum = atoi(num1)+ atoi(num2);
 8001762:	a804      	add	r0, sp, #16
 8001764:	f000 f97d 	bl	8001a62 <atoi>
 8001768:	4605      	mov	r5, r0
 800176a:	a807      	add	r0, sp, #28
 800176c:	f000 f979 	bl	8001a62 <atoi>
 8001770:	4405      	add	r5, r0
  else if (y == 1) LCD_CMD(0xC0 + x);
 8001772:	20c0      	movs	r0, #192	; 0xc0
 8001774:	f7ff fe36 	bl	80013e4 <LCD_CMD>
	  			sprintf(s2,"%d",sum);
 8001778:	462a      	mov	r2, r5
 800177a:	4927      	ldr	r1, [pc, #156]	; (8001818 <main+0x264>)
 800177c:	a80d      	add	r0, sp, #52	; 0x34
 800177e:	f000 fa0b 	bl	8001b98 <siprintf>
	  			LCD_PUTS(s2);
 8001782:	a80d      	add	r0, sp, #52	; 0x34
 8001784:	f7ff fed8 	bl	8001538 <LCD_PUTS>
 8001788:	e7a6      	b.n	80016d8 <main+0x124>
	  			    else if (op == '-'){
 800178a:	2f2d      	cmp	r7, #45	; 0x2d
 800178c:	d108      	bne.n	80017a0 <main+0x1ec>
	  			    	sum = atoi(num1)- atoi(num2);
 800178e:	a804      	add	r0, sp, #16
 8001790:	f000 f967 	bl	8001a62 <atoi>
 8001794:	4605      	mov	r5, r0
 8001796:	a807      	add	r0, sp, #28
 8001798:	f000 f963 	bl	8001a62 <atoi>
 800179c:	1a2d      	subs	r5, r5, r0
 800179e:	e7e8      	b.n	8001772 <main+0x1be>
	  			    else if (op == '*'){
 80017a0:	2f2a      	cmp	r7, #42	; 0x2a
 80017a2:	d108      	bne.n	80017b6 <main+0x202>
	  			    	sum =  atoi(num1)* atoi(num2);
 80017a4:	a804      	add	r0, sp, #16
 80017a6:	f000 f95c 	bl	8001a62 <atoi>
 80017aa:	4605      	mov	r5, r0
 80017ac:	a807      	add	r0, sp, #28
 80017ae:	f000 f958 	bl	8001a62 <atoi>
 80017b2:	4345      	muls	r5, r0
 80017b4:	e7dd      	b.n	8001772 <main+0x1be>
	  			    else if (op == '/'){
 80017b6:	2f2f      	cmp	r7, #47	; 0x2f
 80017b8:	d1db      	bne.n	8001772 <main+0x1be>
	  			    	sum = atoi(num1)/ atoi(num2);
 80017ba:	a804      	add	r0, sp, #16
 80017bc:	f000 f951 	bl	8001a62 <atoi>
 80017c0:	4605      	mov	r5, r0
 80017c2:	a807      	add	r0, sp, #28
 80017c4:	f000 f94d 	bl	8001a62 <atoi>
 80017c8:	fb95 f5f0 	sdiv	r5, r5, r0
 80017cc:	e7d1      	b.n	8001772 <main+0x1be>
	  		}else if( s1 == '*')
 80017ce:	292a      	cmp	r1, #42	; 0x2a
 80017d0:	d182      	bne.n	80016d8 <main+0x124>
				count = 0;
 80017d2:	2400      	movs	r4, #0
	  			LCD_CLEAR();
 80017d4:	f7ff fea7 	bl	8001526 <LCD_CLEAR>
				numLength = 0;
 80017d8:	4626      	mov	r6, r4
				num1[0] = '\0';
 80017da:	f88d a010 	strb.w	sl, [sp, #16]
				num2[0] = '\0';
 80017de:	f88d a01c 	strb.w	sl, [sp, #28]
				op2[0] = '\0';
 80017e2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
				final = 0;
 80017e6:	46a1      	mov	r9, r4
	  			 presentValue = 0;
 80017e8:	46a0      	mov	r8, r4
				op = ' ';
 80017ea:	2720      	movs	r7, #32
 80017ec:	e774      	b.n	80016d8 <main+0x124>
 80017ee:	bf00      	nop
 80017f0:	08002c20 	.word	0x08002c20
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010800 	.word	0x40010800
 80017fc:	40010c00 	.word	0x40010c00
 8001800:	20000208 	.word	0x20000208
 8001804:	40005400 	.word	0x40005400
 8001808:	000186a0 	.word	0x000186a0
 800180c:	2000025c 	.word	0x2000025c
 8001810:	40013800 	.word	0x40013800
 8001814:	2000029c 	.word	0x2000029c
 8001818:	08002c2e 	.word	0x08002c2e

0800181c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_MspInit+0x3c>)
{
 800181e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	f042 0201 	orr.w	r2, r2, #1
 8001826:	619a      	str	r2, [r3, #24]
 8001828:	699a      	ldr	r2, [r3, #24]
 800182a:	f002 0201 	and.w	r2, r2, #1
 800182e:	9200      	str	r2, [sp, #0]
 8001830:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001838:	61da      	str	r2, [r3, #28]
 800183a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001846:	6853      	ldr	r3, [r2, #4]
 8001848:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800184c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001850:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	b002      	add	sp, #8
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000
 800185c:	40010000 	.word	0x40010000

08001860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001860:	b510      	push	{r4, lr}
 8001862:	4604      	mov	r4, r0
 8001864:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	2210      	movs	r2, #16
 8001868:	2100      	movs	r1, #0
 800186a:	a802      	add	r0, sp, #8
 800186c:	f000 f928 	bl	8001ac0 <memset>
  if(hi2c->Instance==I2C1)
 8001870:	6822      	ldr	r2, [r4, #0]
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_I2C_MspInit+0x68>)
 8001874:	429a      	cmp	r2, r3
 8001876:	d124      	bne.n	80018c2 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001878:	4c14      	ldr	r4, [pc, #80]	; (80018cc <HAL_I2C_MspInit+0x6c>)
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	4814      	ldr	r0, [pc, #80]	; (80018d0 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	61a3      	str	r3, [r4, #24]
 8001886:	69a3      	ldr	r3, [r4, #24]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001890:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001894:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001896:	2312      	movs	r3, #18
 8001898:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f7fe fd13 	bl	80002c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <HAL_I2C_MspInit+0x74>)
 80018a4:	6853      	ldr	r3, [r2, #4]
 80018a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018aa:	f043 0302 	orr.w	r3, r3, #2
 80018ae:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018b0:	69e3      	ldr	r3, [r4, #28]
 80018b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b6:	61e3      	str	r3, [r4, #28]
 80018b8:	69e3      	ldr	r3, [r4, #28]
 80018ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018c2:	b006      	add	sp, #24
 80018c4:	bd10      	pop	{r4, pc}
 80018c6:	bf00      	nop
 80018c8:	40005400 	.word	0x40005400
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010c00 	.word	0x40010c00
 80018d4:	40010000 	.word	0x40010000

080018d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d8:	b510      	push	{r4, lr}
 80018da:	4604      	mov	r4, r0
 80018dc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018de:	2210      	movs	r2, #16
 80018e0:	2100      	movs	r1, #0
 80018e2:	a802      	add	r0, sp, #8
 80018e4:	f000 f8ec 	bl	8001ac0 <memset>
  if(huart->Instance==USART1)
 80018e8:	6822      	ldr	r2, [r4, #0]
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_UART_MspInit+0x70>)
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d128      	bne.n	8001942 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80018f4:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018fc:	619a      	str	r2, [r3, #24]
 80018fe:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	4812      	ldr	r0, [pc, #72]	; (800194c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001902:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001906:	9200      	str	r2, [sp, #0]
 8001908:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	699a      	ldr	r2, [r3, #24]
 800190c:	f042 0204 	orr.w	r2, r2, #4
 8001910:	619a      	str	r2, [r3, #24]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800191c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001920:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f7fe fccd 	bl	80002c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800192e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001932:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001934:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	a902      	add	r1, sp, #8
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f7fe fcc3 	bl	80002c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001942:	b006      	add	sp, #24
 8001944:	bd10      	pop	{r4, pc}
 8001946:	bf00      	nop
 8001948:	40013800 	.word	0x40013800
 800194c:	40010800 	.word	0x40010800

08001950 <NMI_Handler>:
 8001950:	4770      	bx	lr

08001952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001952:	e7fe      	b.n	8001952 <HardFault_Handler>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler>

0800195a <SVC_Handler>:
 800195a:	4770      	bx	lr

0800195c <DebugMon_Handler>:
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	4770      	bx	lr

08001960 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001960:	f7fe bc32 	b.w	80001c8 <HAL_IncTick>

08001964 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	460e      	mov	r6, r1
 8001968:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	460c      	mov	r4, r1
 800196c:	1ba3      	subs	r3, r4, r6
 800196e:	429d      	cmp	r5, r3
 8001970:	dc01      	bgt.n	8001976 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001972:	4628      	mov	r0, r5
 8001974:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001976:	f3af 8000 	nop.w
 800197a:	f804 0b01 	strb.w	r0, [r4], #1
 800197e:	e7f5      	b.n	800196c <_read+0x8>

08001980 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001980:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <_sbrk+0x2c>)
{
 8001984:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	b909      	cbnz	r1, 800198e <_sbrk+0xe>
		heap_end = &end;
 800198a:	4909      	ldr	r1, [pc, #36]	; (80019b0 <_sbrk+0x30>)
 800198c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800198e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001990:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001992:	4402      	add	r2, r0
 8001994:	428a      	cmp	r2, r1
 8001996:	d906      	bls.n	80019a6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001998:	f000 f868 	bl	8001a6c <__errno>
 800199c:	230c      	movs	r3, #12
 800199e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80019a6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80019a8:	bd08      	pop	{r3, pc}
 80019aa:	bf00      	nop
 80019ac:	200001f8 	.word	0x200001f8
 80019b0:	200002a4 	.word	0x200002a4

080019b4 <_close>:

int _close(int file)
{
	return -1;
}
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	4770      	bx	lr

080019ba <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80019ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80019be:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80019c0:	604b      	str	r3, [r1, #4]
}
 80019c2:	4770      	bx	lr

080019c4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80019c4:	2001      	movs	r0, #1
 80019c6:	4770      	bx	lr

080019c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80019c8:	2000      	movs	r0, #0
 80019ca:	4770      	bx	lr

080019cc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <SystemInit+0x40>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <SystemInit+0x44>)
 80019da:	400a      	ands	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80019e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019e8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019f0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80019f8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80019fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80019fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <SystemInit+0x48>)
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	f8ff0000 	.word	0xf8ff0000
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a1a:	e003      	b.n	8001a24 <LoopCopyDataInit>

08001a1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a22:	3104      	adds	r1, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a24:	480a      	ldr	r0, [pc, #40]	; (8001a50 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a2c:	d3f6      	bcc.n	8001a1c <CopyDataInit>
  ldr r2, =_sbss
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a30:	e002      	b.n	8001a38 <LoopFillZerobss>

08001a32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a34:	f842 3b04 	str.w	r3, [r2], #4

08001a38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a3c:	d3f9      	bcc.n	8001a32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a3e:	f7ff ffc5 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a42:	f000 f819 	bl	8001a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a46:	f7ff fdb5 	bl	80015b4 <main>
  bx lr
 8001a4a:	4770      	bx	lr
  ldr r3, =_sidata
 8001a4c:	08002df8 	.word	0x08002df8
  ldr r0, =_sdata
 8001a50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a54:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001a58:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001a5c:	200002a4 	.word	0x200002a4

08001a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC1_2_IRQHandler>

08001a62 <atoi>:
 8001a62:	220a      	movs	r2, #10
 8001a64:	2100      	movs	r1, #0
 8001a66:	f000 b93b 	b.w	8001ce0 <strtol>
	...

08001a6c <__errno>:
 8001a6c:	4b01      	ldr	r3, [pc, #4]	; (8001a74 <__errno+0x8>)
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2000000c 	.word	0x2000000c

08001a78 <__libc_init_array>:
 8001a78:	b570      	push	{r4, r5, r6, lr}
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	4e0c      	ldr	r6, [pc, #48]	; (8001ab0 <__libc_init_array+0x38>)
 8001a7e:	4c0d      	ldr	r4, [pc, #52]	; (8001ab4 <__libc_init_array+0x3c>)
 8001a80:	1ba4      	subs	r4, r4, r6
 8001a82:	10a4      	asrs	r4, r4, #2
 8001a84:	42a5      	cmp	r5, r4
 8001a86:	d109      	bne.n	8001a9c <__libc_init_array+0x24>
 8001a88:	f001 f8b6 	bl	8002bf8 <_init>
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	4e0a      	ldr	r6, [pc, #40]	; (8001ab8 <__libc_init_array+0x40>)
 8001a90:	4c0a      	ldr	r4, [pc, #40]	; (8001abc <__libc_init_array+0x44>)
 8001a92:	1ba4      	subs	r4, r4, r6
 8001a94:	10a4      	asrs	r4, r4, #2
 8001a96:	42a5      	cmp	r5, r4
 8001a98:	d105      	bne.n	8001aa6 <__libc_init_array+0x2e>
 8001a9a:	bd70      	pop	{r4, r5, r6, pc}
 8001a9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aa0:	4798      	blx	r3
 8001aa2:	3501      	adds	r5, #1
 8001aa4:	e7ee      	b.n	8001a84 <__libc_init_array+0xc>
 8001aa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aaa:	4798      	blx	r3
 8001aac:	3501      	adds	r5, #1
 8001aae:	e7f2      	b.n	8001a96 <__libc_init_array+0x1e>
 8001ab0:	08002df0 	.word	0x08002df0
 8001ab4:	08002df0 	.word	0x08002df0
 8001ab8:	08002df0 	.word	0x08002df0
 8001abc:	08002df4 	.word	0x08002df4

08001ac0 <memset>:
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4402      	add	r2, r0
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d100      	bne.n	8001aca <memset+0xa>
 8001ac8:	4770      	bx	lr
 8001aca:	f803 1b01 	strb.w	r1, [r3], #1
 8001ace:	e7f9      	b.n	8001ac4 <memset+0x4>

08001ad0 <_puts_r>:
 8001ad0:	b570      	push	{r4, r5, r6, lr}
 8001ad2:	460e      	mov	r6, r1
 8001ad4:	4605      	mov	r5, r0
 8001ad6:	b118      	cbz	r0, 8001ae0 <_puts_r+0x10>
 8001ad8:	6983      	ldr	r3, [r0, #24]
 8001ada:	b90b      	cbnz	r3, 8001ae0 <_puts_r+0x10>
 8001adc:	f000 fac8 	bl	8002070 <__sinit>
 8001ae0:	69ab      	ldr	r3, [r5, #24]
 8001ae2:	68ac      	ldr	r4, [r5, #8]
 8001ae4:	b913      	cbnz	r3, 8001aec <_puts_r+0x1c>
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f000 fac2 	bl	8002070 <__sinit>
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <_puts_r+0xac>)
 8001aee:	429c      	cmp	r4, r3
 8001af0:	d117      	bne.n	8001b22 <_puts_r+0x52>
 8001af2:	686c      	ldr	r4, [r5, #4]
 8001af4:	89a3      	ldrh	r3, [r4, #12]
 8001af6:	071b      	lsls	r3, r3, #28
 8001af8:	d51d      	bpl.n	8001b36 <_puts_r+0x66>
 8001afa:	6923      	ldr	r3, [r4, #16]
 8001afc:	b1db      	cbz	r3, 8001b36 <_puts_r+0x66>
 8001afe:	3e01      	subs	r6, #1
 8001b00:	68a3      	ldr	r3, [r4, #8]
 8001b02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b06:	3b01      	subs	r3, #1
 8001b08:	60a3      	str	r3, [r4, #8]
 8001b0a:	b9e9      	cbnz	r1, 8001b48 <_puts_r+0x78>
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	da2e      	bge.n	8001b6e <_puts_r+0x9e>
 8001b10:	4622      	mov	r2, r4
 8001b12:	210a      	movs	r1, #10
 8001b14:	4628      	mov	r0, r5
 8001b16:	f000 f8f9 	bl	8001d0c <__swbuf_r>
 8001b1a:	3001      	adds	r0, #1
 8001b1c:	d011      	beq.n	8001b42 <_puts_r+0x72>
 8001b1e:	200a      	movs	r0, #10
 8001b20:	bd70      	pop	{r4, r5, r6, pc}
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <_puts_r+0xb0>)
 8001b24:	429c      	cmp	r4, r3
 8001b26:	d101      	bne.n	8001b2c <_puts_r+0x5c>
 8001b28:	68ac      	ldr	r4, [r5, #8]
 8001b2a:	e7e3      	b.n	8001af4 <_puts_r+0x24>
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <_puts_r+0xb4>)
 8001b2e:	429c      	cmp	r4, r3
 8001b30:	bf08      	it	eq
 8001b32:	68ec      	ldreq	r4, [r5, #12]
 8001b34:	e7de      	b.n	8001af4 <_puts_r+0x24>
 8001b36:	4621      	mov	r1, r4
 8001b38:	4628      	mov	r0, r5
 8001b3a:	f000 f939 	bl	8001db0 <__swsetup_r>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	d0dd      	beq.n	8001afe <_puts_r+0x2e>
 8001b42:	f04f 30ff 	mov.w	r0, #4294967295
 8001b46:	bd70      	pop	{r4, r5, r6, pc}
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da04      	bge.n	8001b56 <_puts_r+0x86>
 8001b4c:	69a2      	ldr	r2, [r4, #24]
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	db06      	blt.n	8001b60 <_puts_r+0x90>
 8001b52:	290a      	cmp	r1, #10
 8001b54:	d004      	beq.n	8001b60 <_puts_r+0x90>
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	6022      	str	r2, [r4, #0]
 8001b5c:	7019      	strb	r1, [r3, #0]
 8001b5e:	e7cf      	b.n	8001b00 <_puts_r+0x30>
 8001b60:	4622      	mov	r2, r4
 8001b62:	4628      	mov	r0, r5
 8001b64:	f000 f8d2 	bl	8001d0c <__swbuf_r>
 8001b68:	3001      	adds	r0, #1
 8001b6a:	d1c9      	bne.n	8001b00 <_puts_r+0x30>
 8001b6c:	e7e9      	b.n	8001b42 <_puts_r+0x72>
 8001b6e:	200a      	movs	r0, #10
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	6022      	str	r2, [r4, #0]
 8001b76:	7018      	strb	r0, [r3, #0]
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
 8001b7a:	bf00      	nop
 8001b7c:	08002c70 	.word	0x08002c70
 8001b80:	08002c90 	.word	0x08002c90
 8001b84:	08002c50 	.word	0x08002c50

08001b88 <puts>:
 8001b88:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <puts+0xc>)
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	f7ff bf9f 	b.w	8001ad0 <_puts_r>
 8001b92:	bf00      	nop
 8001b94:	2000000c 	.word	0x2000000c

08001b98 <siprintf>:
 8001b98:	b40e      	push	{r1, r2, r3}
 8001b9a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001b9e:	b500      	push	{lr}
 8001ba0:	b09c      	sub	sp, #112	; 0x70
 8001ba2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001ba6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001baa:	9104      	str	r1, [sp, #16]
 8001bac:	9107      	str	r1, [sp, #28]
 8001bae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8001bb4:	9002      	str	r0, [sp, #8]
 8001bb6:	9006      	str	r0, [sp, #24]
 8001bb8:	4808      	ldr	r0, [pc, #32]	; (8001bdc <siprintf+0x44>)
 8001bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8001bbe:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001bc2:	6800      	ldr	r0, [r0, #0]
 8001bc4:	a902      	add	r1, sp, #8
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	f000 fc5c 	bl	8002484 <_svfiprintf_r>
 8001bcc:	2200      	movs	r2, #0
 8001bce:	9b02      	ldr	r3, [sp, #8]
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	b01c      	add	sp, #112	; 0x70
 8001bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bd8:	b003      	add	sp, #12
 8001bda:	4770      	bx	lr
 8001bdc:	2000000c 	.word	0x2000000c

08001be0 <_strtol_l.isra.0>:
 8001be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be4:	4680      	mov	r8, r0
 8001be6:	4689      	mov	r9, r1
 8001be8:	4692      	mov	sl, r2
 8001bea:	461f      	mov	r7, r3
 8001bec:	468b      	mov	fp, r1
 8001bee:	465d      	mov	r5, fp
 8001bf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001bf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001bf6:	f000 fac5 	bl	8002184 <__locale_ctype_ptr_l>
 8001bfa:	4420      	add	r0, r4
 8001bfc:	7846      	ldrb	r6, [r0, #1]
 8001bfe:	f016 0608 	ands.w	r6, r6, #8
 8001c02:	d10b      	bne.n	8001c1c <_strtol_l.isra.0+0x3c>
 8001c04:	2c2d      	cmp	r4, #45	; 0x2d
 8001c06:	d10b      	bne.n	8001c20 <_strtol_l.isra.0+0x40>
 8001c08:	2601      	movs	r6, #1
 8001c0a:	782c      	ldrb	r4, [r5, #0]
 8001c0c:	f10b 0502 	add.w	r5, fp, #2
 8001c10:	b167      	cbz	r7, 8001c2c <_strtol_l.isra.0+0x4c>
 8001c12:	2f10      	cmp	r7, #16
 8001c14:	d114      	bne.n	8001c40 <_strtol_l.isra.0+0x60>
 8001c16:	2c30      	cmp	r4, #48	; 0x30
 8001c18:	d00a      	beq.n	8001c30 <_strtol_l.isra.0+0x50>
 8001c1a:	e011      	b.n	8001c40 <_strtol_l.isra.0+0x60>
 8001c1c:	46ab      	mov	fp, r5
 8001c1e:	e7e6      	b.n	8001bee <_strtol_l.isra.0+0xe>
 8001c20:	2c2b      	cmp	r4, #43	; 0x2b
 8001c22:	bf04      	itt	eq
 8001c24:	782c      	ldrbeq	r4, [r5, #0]
 8001c26:	f10b 0502 	addeq.w	r5, fp, #2
 8001c2a:	e7f1      	b.n	8001c10 <_strtol_l.isra.0+0x30>
 8001c2c:	2c30      	cmp	r4, #48	; 0x30
 8001c2e:	d127      	bne.n	8001c80 <_strtol_l.isra.0+0xa0>
 8001c30:	782b      	ldrb	r3, [r5, #0]
 8001c32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001c36:	2b58      	cmp	r3, #88	; 0x58
 8001c38:	d14b      	bne.n	8001cd2 <_strtol_l.isra.0+0xf2>
 8001c3a:	2710      	movs	r7, #16
 8001c3c:	786c      	ldrb	r4, [r5, #1]
 8001c3e:	3502      	adds	r5, #2
 8001c40:	2e00      	cmp	r6, #0
 8001c42:	bf0c      	ite	eq
 8001c44:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8001c48:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	fbb1 fef7 	udiv	lr, r1, r7
 8001c52:	4610      	mov	r0, r2
 8001c54:	fb07 1c1e 	mls	ip, r7, lr, r1
 8001c58:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8001c5c:	2b09      	cmp	r3, #9
 8001c5e:	d811      	bhi.n	8001c84 <_strtol_l.isra.0+0xa4>
 8001c60:	461c      	mov	r4, r3
 8001c62:	42a7      	cmp	r7, r4
 8001c64:	dd1d      	ble.n	8001ca2 <_strtol_l.isra.0+0xc2>
 8001c66:	1c53      	adds	r3, r2, #1
 8001c68:	d007      	beq.n	8001c7a <_strtol_l.isra.0+0x9a>
 8001c6a:	4586      	cmp	lr, r0
 8001c6c:	d316      	bcc.n	8001c9c <_strtol_l.isra.0+0xbc>
 8001c6e:	d101      	bne.n	8001c74 <_strtol_l.isra.0+0x94>
 8001c70:	45a4      	cmp	ip, r4
 8001c72:	db13      	blt.n	8001c9c <_strtol_l.isra.0+0xbc>
 8001c74:	2201      	movs	r2, #1
 8001c76:	fb00 4007 	mla	r0, r0, r7, r4
 8001c7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001c7e:	e7eb      	b.n	8001c58 <_strtol_l.isra.0+0x78>
 8001c80:	270a      	movs	r7, #10
 8001c82:	e7dd      	b.n	8001c40 <_strtol_l.isra.0+0x60>
 8001c84:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8001c88:	2b19      	cmp	r3, #25
 8001c8a:	d801      	bhi.n	8001c90 <_strtol_l.isra.0+0xb0>
 8001c8c:	3c37      	subs	r4, #55	; 0x37
 8001c8e:	e7e8      	b.n	8001c62 <_strtol_l.isra.0+0x82>
 8001c90:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8001c94:	2b19      	cmp	r3, #25
 8001c96:	d804      	bhi.n	8001ca2 <_strtol_l.isra.0+0xc2>
 8001c98:	3c57      	subs	r4, #87	; 0x57
 8001c9a:	e7e2      	b.n	8001c62 <_strtol_l.isra.0+0x82>
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	e7eb      	b.n	8001c7a <_strtol_l.isra.0+0x9a>
 8001ca2:	1c53      	adds	r3, r2, #1
 8001ca4:	d108      	bne.n	8001cb8 <_strtol_l.isra.0+0xd8>
 8001ca6:	2322      	movs	r3, #34	; 0x22
 8001ca8:	4608      	mov	r0, r1
 8001caa:	f8c8 3000 	str.w	r3, [r8]
 8001cae:	f1ba 0f00 	cmp.w	sl, #0
 8001cb2:	d107      	bne.n	8001cc4 <_strtol_l.isra.0+0xe4>
 8001cb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cb8:	b106      	cbz	r6, 8001cbc <_strtol_l.isra.0+0xdc>
 8001cba:	4240      	negs	r0, r0
 8001cbc:	f1ba 0f00 	cmp.w	sl, #0
 8001cc0:	d00c      	beq.n	8001cdc <_strtol_l.isra.0+0xfc>
 8001cc2:	b122      	cbz	r2, 8001cce <_strtol_l.isra.0+0xee>
 8001cc4:	3d01      	subs	r5, #1
 8001cc6:	f8ca 5000 	str.w	r5, [sl]
 8001cca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cce:	464d      	mov	r5, r9
 8001cd0:	e7f9      	b.n	8001cc6 <_strtol_l.isra.0+0xe6>
 8001cd2:	2430      	movs	r4, #48	; 0x30
 8001cd4:	2f00      	cmp	r7, #0
 8001cd6:	d1b3      	bne.n	8001c40 <_strtol_l.isra.0+0x60>
 8001cd8:	2708      	movs	r7, #8
 8001cda:	e7b1      	b.n	8001c40 <_strtol_l.isra.0+0x60>
 8001cdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001ce0 <strtol>:
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <strtol+0x24>)
 8001ce2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ce4:	681c      	ldr	r4, [r3, #0]
 8001ce6:	4d08      	ldr	r5, [pc, #32]	; (8001d08 <strtol+0x28>)
 8001ce8:	6a23      	ldr	r3, [r4, #32]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bf08      	it	eq
 8001cee:	462b      	moveq	r3, r5
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	460a      	mov	r2, r1
 8001cf6:	4601      	mov	r1, r0
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f7ff ff71 	bl	8001be0 <_strtol_l.isra.0>
 8001cfe:	b003      	add	sp, #12
 8001d00:	bd30      	pop	{r4, r5, pc}
 8001d02:	bf00      	nop
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	20000070 	.word	0x20000070

08001d0c <__swbuf_r>:
 8001d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0e:	460e      	mov	r6, r1
 8001d10:	4614      	mov	r4, r2
 8001d12:	4605      	mov	r5, r0
 8001d14:	b118      	cbz	r0, 8001d1e <__swbuf_r+0x12>
 8001d16:	6983      	ldr	r3, [r0, #24]
 8001d18:	b90b      	cbnz	r3, 8001d1e <__swbuf_r+0x12>
 8001d1a:	f000 f9a9 	bl	8002070 <__sinit>
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <__swbuf_r+0x98>)
 8001d20:	429c      	cmp	r4, r3
 8001d22:	d12a      	bne.n	8001d7a <__swbuf_r+0x6e>
 8001d24:	686c      	ldr	r4, [r5, #4]
 8001d26:	69a3      	ldr	r3, [r4, #24]
 8001d28:	60a3      	str	r3, [r4, #8]
 8001d2a:	89a3      	ldrh	r3, [r4, #12]
 8001d2c:	071a      	lsls	r2, r3, #28
 8001d2e:	d52e      	bpl.n	8001d8e <__swbuf_r+0x82>
 8001d30:	6923      	ldr	r3, [r4, #16]
 8001d32:	b363      	cbz	r3, 8001d8e <__swbuf_r+0x82>
 8001d34:	6923      	ldr	r3, [r4, #16]
 8001d36:	6820      	ldr	r0, [r4, #0]
 8001d38:	b2f6      	uxtb	r6, r6
 8001d3a:	1ac0      	subs	r0, r0, r3
 8001d3c:	6963      	ldr	r3, [r4, #20]
 8001d3e:	4637      	mov	r7, r6
 8001d40:	4298      	cmp	r0, r3
 8001d42:	db04      	blt.n	8001d4e <__swbuf_r+0x42>
 8001d44:	4621      	mov	r1, r4
 8001d46:	4628      	mov	r0, r5
 8001d48:	f000 f928 	bl	8001f9c <_fflush_r>
 8001d4c:	bb28      	cbnz	r0, 8001d9a <__swbuf_r+0x8e>
 8001d4e:	68a3      	ldr	r3, [r4, #8]
 8001d50:	3001      	adds	r0, #1
 8001d52:	3b01      	subs	r3, #1
 8001d54:	60a3      	str	r3, [r4, #8]
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	6022      	str	r2, [r4, #0]
 8001d5c:	701e      	strb	r6, [r3, #0]
 8001d5e:	6963      	ldr	r3, [r4, #20]
 8001d60:	4298      	cmp	r0, r3
 8001d62:	d004      	beq.n	8001d6e <__swbuf_r+0x62>
 8001d64:	89a3      	ldrh	r3, [r4, #12]
 8001d66:	07db      	lsls	r3, r3, #31
 8001d68:	d519      	bpl.n	8001d9e <__swbuf_r+0x92>
 8001d6a:	2e0a      	cmp	r6, #10
 8001d6c:	d117      	bne.n	8001d9e <__swbuf_r+0x92>
 8001d6e:	4621      	mov	r1, r4
 8001d70:	4628      	mov	r0, r5
 8001d72:	f000 f913 	bl	8001f9c <_fflush_r>
 8001d76:	b190      	cbz	r0, 8001d9e <__swbuf_r+0x92>
 8001d78:	e00f      	b.n	8001d9a <__swbuf_r+0x8e>
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <__swbuf_r+0x9c>)
 8001d7c:	429c      	cmp	r4, r3
 8001d7e:	d101      	bne.n	8001d84 <__swbuf_r+0x78>
 8001d80:	68ac      	ldr	r4, [r5, #8]
 8001d82:	e7d0      	b.n	8001d26 <__swbuf_r+0x1a>
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <__swbuf_r+0xa0>)
 8001d86:	429c      	cmp	r4, r3
 8001d88:	bf08      	it	eq
 8001d8a:	68ec      	ldreq	r4, [r5, #12]
 8001d8c:	e7cb      	b.n	8001d26 <__swbuf_r+0x1a>
 8001d8e:	4621      	mov	r1, r4
 8001d90:	4628      	mov	r0, r5
 8001d92:	f000 f80d 	bl	8001db0 <__swsetup_r>
 8001d96:	2800      	cmp	r0, #0
 8001d98:	d0cc      	beq.n	8001d34 <__swbuf_r+0x28>
 8001d9a:	f04f 37ff 	mov.w	r7, #4294967295
 8001d9e:	4638      	mov	r0, r7
 8001da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001da2:	bf00      	nop
 8001da4:	08002c70 	.word	0x08002c70
 8001da8:	08002c90 	.word	0x08002c90
 8001dac:	08002c50 	.word	0x08002c50

08001db0 <__swsetup_r>:
 8001db0:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <__swsetup_r+0xcc>)
 8001db2:	b570      	push	{r4, r5, r6, lr}
 8001db4:	681d      	ldr	r5, [r3, #0]
 8001db6:	4606      	mov	r6, r0
 8001db8:	460c      	mov	r4, r1
 8001dba:	b125      	cbz	r5, 8001dc6 <__swsetup_r+0x16>
 8001dbc:	69ab      	ldr	r3, [r5, #24]
 8001dbe:	b913      	cbnz	r3, 8001dc6 <__swsetup_r+0x16>
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	f000 f955 	bl	8002070 <__sinit>
 8001dc6:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <__swsetup_r+0xd0>)
 8001dc8:	429c      	cmp	r4, r3
 8001dca:	d10f      	bne.n	8001dec <__swsetup_r+0x3c>
 8001dcc:	686c      	ldr	r4, [r5, #4]
 8001dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	0715      	lsls	r5, r2, #28
 8001dd6:	d42c      	bmi.n	8001e32 <__swsetup_r+0x82>
 8001dd8:	06d0      	lsls	r0, r2, #27
 8001dda:	d411      	bmi.n	8001e00 <__swsetup_r+0x50>
 8001ddc:	2209      	movs	r2, #9
 8001dde:	6032      	str	r2, [r6, #0]
 8001de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de4:	81a3      	strh	r3, [r4, #12]
 8001de6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dea:	bd70      	pop	{r4, r5, r6, pc}
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <__swsetup_r+0xd4>)
 8001dee:	429c      	cmp	r4, r3
 8001df0:	d101      	bne.n	8001df6 <__swsetup_r+0x46>
 8001df2:	68ac      	ldr	r4, [r5, #8]
 8001df4:	e7eb      	b.n	8001dce <__swsetup_r+0x1e>
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <__swsetup_r+0xd8>)
 8001df8:	429c      	cmp	r4, r3
 8001dfa:	bf08      	it	eq
 8001dfc:	68ec      	ldreq	r4, [r5, #12]
 8001dfe:	e7e6      	b.n	8001dce <__swsetup_r+0x1e>
 8001e00:	0751      	lsls	r1, r2, #29
 8001e02:	d512      	bpl.n	8001e2a <__swsetup_r+0x7a>
 8001e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e06:	b141      	cbz	r1, 8001e1a <__swsetup_r+0x6a>
 8001e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e0c:	4299      	cmp	r1, r3
 8001e0e:	d002      	beq.n	8001e16 <__swsetup_r+0x66>
 8001e10:	4630      	mov	r0, r6
 8001e12:	f000 fa31 	bl	8002278 <_free_r>
 8001e16:	2300      	movs	r3, #0
 8001e18:	6363      	str	r3, [r4, #52]	; 0x34
 8001e1a:	89a3      	ldrh	r3, [r4, #12]
 8001e1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e20:	81a3      	strh	r3, [r4, #12]
 8001e22:	2300      	movs	r3, #0
 8001e24:	6063      	str	r3, [r4, #4]
 8001e26:	6923      	ldr	r3, [r4, #16]
 8001e28:	6023      	str	r3, [r4, #0]
 8001e2a:	89a3      	ldrh	r3, [r4, #12]
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	81a3      	strh	r3, [r4, #12]
 8001e32:	6923      	ldr	r3, [r4, #16]
 8001e34:	b94b      	cbnz	r3, 8001e4a <__swsetup_r+0x9a>
 8001e36:	89a3      	ldrh	r3, [r4, #12]
 8001e38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e40:	d003      	beq.n	8001e4a <__swsetup_r+0x9a>
 8001e42:	4621      	mov	r1, r4
 8001e44:	4630      	mov	r0, r6
 8001e46:	f000 f9c5 	bl	80021d4 <__smakebuf_r>
 8001e4a:	89a2      	ldrh	r2, [r4, #12]
 8001e4c:	f012 0301 	ands.w	r3, r2, #1
 8001e50:	d00c      	beq.n	8001e6c <__swsetup_r+0xbc>
 8001e52:	2300      	movs	r3, #0
 8001e54:	60a3      	str	r3, [r4, #8]
 8001e56:	6963      	ldr	r3, [r4, #20]
 8001e58:	425b      	negs	r3, r3
 8001e5a:	61a3      	str	r3, [r4, #24]
 8001e5c:	6923      	ldr	r3, [r4, #16]
 8001e5e:	b953      	cbnz	r3, 8001e76 <__swsetup_r+0xc6>
 8001e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e64:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001e68:	d1ba      	bne.n	8001de0 <__swsetup_r+0x30>
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}
 8001e6c:	0792      	lsls	r2, r2, #30
 8001e6e:	bf58      	it	pl
 8001e70:	6963      	ldrpl	r3, [r4, #20]
 8001e72:	60a3      	str	r3, [r4, #8]
 8001e74:	e7f2      	b.n	8001e5c <__swsetup_r+0xac>
 8001e76:	2000      	movs	r0, #0
 8001e78:	e7f7      	b.n	8001e6a <__swsetup_r+0xba>
 8001e7a:	bf00      	nop
 8001e7c:	2000000c 	.word	0x2000000c
 8001e80:	08002c70 	.word	0x08002c70
 8001e84:	08002c90 	.word	0x08002c90
 8001e88:	08002c50 	.word	0x08002c50

08001e8c <__sflush_r>:
 8001e8c:	898a      	ldrh	r2, [r1, #12]
 8001e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e92:	4605      	mov	r5, r0
 8001e94:	0710      	lsls	r0, r2, #28
 8001e96:	460c      	mov	r4, r1
 8001e98:	d45a      	bmi.n	8001f50 <__sflush_r+0xc4>
 8001e9a:	684b      	ldr	r3, [r1, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	dc05      	bgt.n	8001eac <__sflush_r+0x20>
 8001ea0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dc02      	bgt.n	8001eac <__sflush_r+0x20>
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001eae:	2e00      	cmp	r6, #0
 8001eb0:	d0f9      	beq.n	8001ea6 <__sflush_r+0x1a>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001eb8:	682f      	ldr	r7, [r5, #0]
 8001eba:	602b      	str	r3, [r5, #0]
 8001ebc:	d033      	beq.n	8001f26 <__sflush_r+0x9a>
 8001ebe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ec0:	89a3      	ldrh	r3, [r4, #12]
 8001ec2:	075a      	lsls	r2, r3, #29
 8001ec4:	d505      	bpl.n	8001ed2 <__sflush_r+0x46>
 8001ec6:	6863      	ldr	r3, [r4, #4]
 8001ec8:	1ac0      	subs	r0, r0, r3
 8001eca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ecc:	b10b      	cbz	r3, 8001ed2 <__sflush_r+0x46>
 8001ece:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ed0:	1ac0      	subs	r0, r0, r3
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ed8:	6a21      	ldr	r1, [r4, #32]
 8001eda:	4628      	mov	r0, r5
 8001edc:	47b0      	blx	r6
 8001ede:	1c43      	adds	r3, r0, #1
 8001ee0:	89a3      	ldrh	r3, [r4, #12]
 8001ee2:	d106      	bne.n	8001ef2 <__sflush_r+0x66>
 8001ee4:	6829      	ldr	r1, [r5, #0]
 8001ee6:	291d      	cmp	r1, #29
 8001ee8:	d84b      	bhi.n	8001f82 <__sflush_r+0xf6>
 8001eea:	4a2b      	ldr	r2, [pc, #172]	; (8001f98 <__sflush_r+0x10c>)
 8001eec:	40ca      	lsrs	r2, r1
 8001eee:	07d6      	lsls	r6, r2, #31
 8001ef0:	d547      	bpl.n	8001f82 <__sflush_r+0xf6>
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	6062      	str	r2, [r4, #4]
 8001ef6:	6922      	ldr	r2, [r4, #16]
 8001ef8:	04d9      	lsls	r1, r3, #19
 8001efa:	6022      	str	r2, [r4, #0]
 8001efc:	d504      	bpl.n	8001f08 <__sflush_r+0x7c>
 8001efe:	1c42      	adds	r2, r0, #1
 8001f00:	d101      	bne.n	8001f06 <__sflush_r+0x7a>
 8001f02:	682b      	ldr	r3, [r5, #0]
 8001f04:	b903      	cbnz	r3, 8001f08 <__sflush_r+0x7c>
 8001f06:	6560      	str	r0, [r4, #84]	; 0x54
 8001f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f0a:	602f      	str	r7, [r5, #0]
 8001f0c:	2900      	cmp	r1, #0
 8001f0e:	d0ca      	beq.n	8001ea6 <__sflush_r+0x1a>
 8001f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f14:	4299      	cmp	r1, r3
 8001f16:	d002      	beq.n	8001f1e <__sflush_r+0x92>
 8001f18:	4628      	mov	r0, r5
 8001f1a:	f000 f9ad 	bl	8002278 <_free_r>
 8001f1e:	2000      	movs	r0, #0
 8001f20:	6360      	str	r0, [r4, #52]	; 0x34
 8001f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f26:	6a21      	ldr	r1, [r4, #32]
 8001f28:	2301      	movs	r3, #1
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	47b0      	blx	r6
 8001f2e:	1c41      	adds	r1, r0, #1
 8001f30:	d1c6      	bne.n	8001ec0 <__sflush_r+0x34>
 8001f32:	682b      	ldr	r3, [r5, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0c3      	beq.n	8001ec0 <__sflush_r+0x34>
 8001f38:	2b1d      	cmp	r3, #29
 8001f3a:	d001      	beq.n	8001f40 <__sflush_r+0xb4>
 8001f3c:	2b16      	cmp	r3, #22
 8001f3e:	d101      	bne.n	8001f44 <__sflush_r+0xb8>
 8001f40:	602f      	str	r7, [r5, #0]
 8001f42:	e7b0      	b.n	8001ea6 <__sflush_r+0x1a>
 8001f44:	89a3      	ldrh	r3, [r4, #12]
 8001f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f4a:	81a3      	strh	r3, [r4, #12]
 8001f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f50:	690f      	ldr	r7, [r1, #16]
 8001f52:	2f00      	cmp	r7, #0
 8001f54:	d0a7      	beq.n	8001ea6 <__sflush_r+0x1a>
 8001f56:	0793      	lsls	r3, r2, #30
 8001f58:	bf18      	it	ne
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	680e      	ldr	r6, [r1, #0]
 8001f5e:	bf08      	it	eq
 8001f60:	694b      	ldreq	r3, [r1, #20]
 8001f62:	eba6 0807 	sub.w	r8, r6, r7
 8001f66:	600f      	str	r7, [r1, #0]
 8001f68:	608b      	str	r3, [r1, #8]
 8001f6a:	f1b8 0f00 	cmp.w	r8, #0
 8001f6e:	dd9a      	ble.n	8001ea6 <__sflush_r+0x1a>
 8001f70:	4643      	mov	r3, r8
 8001f72:	463a      	mov	r2, r7
 8001f74:	6a21      	ldr	r1, [r4, #32]
 8001f76:	4628      	mov	r0, r5
 8001f78:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f7a:	47b0      	blx	r6
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	dc07      	bgt.n	8001f90 <__sflush_r+0x104>
 8001f80:	89a3      	ldrh	r3, [r4, #12]
 8001f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f86:	81a3      	strh	r3, [r4, #12]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f90:	4407      	add	r7, r0
 8001f92:	eba8 0800 	sub.w	r8, r8, r0
 8001f96:	e7e8      	b.n	8001f6a <__sflush_r+0xde>
 8001f98:	20400001 	.word	0x20400001

08001f9c <_fflush_r>:
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	690b      	ldr	r3, [r1, #16]
 8001fa0:	4605      	mov	r5, r0
 8001fa2:	460c      	mov	r4, r1
 8001fa4:	b1db      	cbz	r3, 8001fde <_fflush_r+0x42>
 8001fa6:	b118      	cbz	r0, 8001fb0 <_fflush_r+0x14>
 8001fa8:	6983      	ldr	r3, [r0, #24]
 8001faa:	b90b      	cbnz	r3, 8001fb0 <_fflush_r+0x14>
 8001fac:	f000 f860 	bl	8002070 <__sinit>
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <_fflush_r+0x48>)
 8001fb2:	429c      	cmp	r4, r3
 8001fb4:	d109      	bne.n	8001fca <_fflush_r+0x2e>
 8001fb6:	686c      	ldr	r4, [r5, #4]
 8001fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fbc:	b17b      	cbz	r3, 8001fde <_fflush_r+0x42>
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fc6:	f7ff bf61 	b.w	8001e8c <__sflush_r>
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <_fflush_r+0x4c>)
 8001fcc:	429c      	cmp	r4, r3
 8001fce:	d101      	bne.n	8001fd4 <_fflush_r+0x38>
 8001fd0:	68ac      	ldr	r4, [r5, #8]
 8001fd2:	e7f1      	b.n	8001fb8 <_fflush_r+0x1c>
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <_fflush_r+0x50>)
 8001fd6:	429c      	cmp	r4, r3
 8001fd8:	bf08      	it	eq
 8001fda:	68ec      	ldreq	r4, [r5, #12]
 8001fdc:	e7ec      	b.n	8001fb8 <_fflush_r+0x1c>
 8001fde:	2000      	movs	r0, #0
 8001fe0:	bd38      	pop	{r3, r4, r5, pc}
 8001fe2:	bf00      	nop
 8001fe4:	08002c70 	.word	0x08002c70
 8001fe8:	08002c90 	.word	0x08002c90
 8001fec:	08002c50 	.word	0x08002c50

08001ff0 <_cleanup_r>:
 8001ff0:	4901      	ldr	r1, [pc, #4]	; (8001ff8 <_cleanup_r+0x8>)
 8001ff2:	f000 b8a9 	b.w	8002148 <_fwalk_reent>
 8001ff6:	bf00      	nop
 8001ff8:	08001f9d 	.word	0x08001f9d

08001ffc <std.isra.0>:
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	b510      	push	{r4, lr}
 8002000:	4604      	mov	r4, r0
 8002002:	6003      	str	r3, [r0, #0]
 8002004:	6043      	str	r3, [r0, #4]
 8002006:	6083      	str	r3, [r0, #8]
 8002008:	8181      	strh	r1, [r0, #12]
 800200a:	6643      	str	r3, [r0, #100]	; 0x64
 800200c:	81c2      	strh	r2, [r0, #14]
 800200e:	6103      	str	r3, [r0, #16]
 8002010:	6143      	str	r3, [r0, #20]
 8002012:	6183      	str	r3, [r0, #24]
 8002014:	4619      	mov	r1, r3
 8002016:	2208      	movs	r2, #8
 8002018:	305c      	adds	r0, #92	; 0x5c
 800201a:	f7ff fd51 	bl	8001ac0 <memset>
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <std.isra.0+0x38>)
 8002020:	6224      	str	r4, [r4, #32]
 8002022:	6263      	str	r3, [r4, #36]	; 0x24
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <std.isra.0+0x3c>)
 8002026:	62a3      	str	r3, [r4, #40]	; 0x28
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <std.isra.0+0x40>)
 800202a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <std.isra.0+0x44>)
 800202e:	6323      	str	r3, [r4, #48]	; 0x30
 8002030:	bd10      	pop	{r4, pc}
 8002032:	bf00      	nop
 8002034:	080029bd 	.word	0x080029bd
 8002038:	080029df 	.word	0x080029df
 800203c:	08002a17 	.word	0x08002a17
 8002040:	08002a3b 	.word	0x08002a3b

08002044 <__sfmoreglue>:
 8002044:	b570      	push	{r4, r5, r6, lr}
 8002046:	2568      	movs	r5, #104	; 0x68
 8002048:	1e4a      	subs	r2, r1, #1
 800204a:	4355      	muls	r5, r2
 800204c:	460e      	mov	r6, r1
 800204e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002052:	f000 f95d 	bl	8002310 <_malloc_r>
 8002056:	4604      	mov	r4, r0
 8002058:	b140      	cbz	r0, 800206c <__sfmoreglue+0x28>
 800205a:	2100      	movs	r1, #0
 800205c:	e880 0042 	stmia.w	r0, {r1, r6}
 8002060:	300c      	adds	r0, #12
 8002062:	60a0      	str	r0, [r4, #8]
 8002064:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002068:	f7ff fd2a 	bl	8001ac0 <memset>
 800206c:	4620      	mov	r0, r4
 800206e:	bd70      	pop	{r4, r5, r6, pc}

08002070 <__sinit>:
 8002070:	6983      	ldr	r3, [r0, #24]
 8002072:	b510      	push	{r4, lr}
 8002074:	4604      	mov	r4, r0
 8002076:	bb33      	cbnz	r3, 80020c6 <__sinit+0x56>
 8002078:	6483      	str	r3, [r0, #72]	; 0x48
 800207a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800207c:	6503      	str	r3, [r0, #80]	; 0x50
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <__sinit+0x58>)
 8002080:	4a12      	ldr	r2, [pc, #72]	; (80020cc <__sinit+0x5c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6282      	str	r2, [r0, #40]	; 0x28
 8002086:	4298      	cmp	r0, r3
 8002088:	bf04      	itt	eq
 800208a:	2301      	moveq	r3, #1
 800208c:	6183      	streq	r3, [r0, #24]
 800208e:	f000 f81f 	bl	80020d0 <__sfp>
 8002092:	6060      	str	r0, [r4, #4]
 8002094:	4620      	mov	r0, r4
 8002096:	f000 f81b 	bl	80020d0 <__sfp>
 800209a:	60a0      	str	r0, [r4, #8]
 800209c:	4620      	mov	r0, r4
 800209e:	f000 f817 	bl	80020d0 <__sfp>
 80020a2:	2200      	movs	r2, #0
 80020a4:	60e0      	str	r0, [r4, #12]
 80020a6:	2104      	movs	r1, #4
 80020a8:	6860      	ldr	r0, [r4, #4]
 80020aa:	f7ff ffa7 	bl	8001ffc <std.isra.0>
 80020ae:	2201      	movs	r2, #1
 80020b0:	2109      	movs	r1, #9
 80020b2:	68a0      	ldr	r0, [r4, #8]
 80020b4:	f7ff ffa2 	bl	8001ffc <std.isra.0>
 80020b8:	2202      	movs	r2, #2
 80020ba:	2112      	movs	r1, #18
 80020bc:	68e0      	ldr	r0, [r4, #12]
 80020be:	f7ff ff9d 	bl	8001ffc <std.isra.0>
 80020c2:	2301      	movs	r3, #1
 80020c4:	61a3      	str	r3, [r4, #24]
 80020c6:	bd10      	pop	{r4, pc}
 80020c8:	08002c4c 	.word	0x08002c4c
 80020cc:	08001ff1 	.word	0x08001ff1

080020d0 <__sfp>:
 80020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <__sfp+0x74>)
 80020d4:	4607      	mov	r7, r0
 80020d6:	681e      	ldr	r6, [r3, #0]
 80020d8:	69b3      	ldr	r3, [r6, #24]
 80020da:	b913      	cbnz	r3, 80020e2 <__sfp+0x12>
 80020dc:	4630      	mov	r0, r6
 80020de:	f7ff ffc7 	bl	8002070 <__sinit>
 80020e2:	3648      	adds	r6, #72	; 0x48
 80020e4:	68b4      	ldr	r4, [r6, #8]
 80020e6:	6873      	ldr	r3, [r6, #4]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	d503      	bpl.n	80020f4 <__sfp+0x24>
 80020ec:	6833      	ldr	r3, [r6, #0]
 80020ee:	b133      	cbz	r3, 80020fe <__sfp+0x2e>
 80020f0:	6836      	ldr	r6, [r6, #0]
 80020f2:	e7f7      	b.n	80020e4 <__sfp+0x14>
 80020f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80020f8:	b16d      	cbz	r5, 8002116 <__sfp+0x46>
 80020fa:	3468      	adds	r4, #104	; 0x68
 80020fc:	e7f4      	b.n	80020e8 <__sfp+0x18>
 80020fe:	2104      	movs	r1, #4
 8002100:	4638      	mov	r0, r7
 8002102:	f7ff ff9f 	bl	8002044 <__sfmoreglue>
 8002106:	6030      	str	r0, [r6, #0]
 8002108:	2800      	cmp	r0, #0
 800210a:	d1f1      	bne.n	80020f0 <__sfp+0x20>
 800210c:	230c      	movs	r3, #12
 800210e:	4604      	mov	r4, r0
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	4620      	mov	r0, r4
 8002114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800211a:	81e3      	strh	r3, [r4, #14]
 800211c:	2301      	movs	r3, #1
 800211e:	6665      	str	r5, [r4, #100]	; 0x64
 8002120:	81a3      	strh	r3, [r4, #12]
 8002122:	6025      	str	r5, [r4, #0]
 8002124:	60a5      	str	r5, [r4, #8]
 8002126:	6065      	str	r5, [r4, #4]
 8002128:	6125      	str	r5, [r4, #16]
 800212a:	6165      	str	r5, [r4, #20]
 800212c:	61a5      	str	r5, [r4, #24]
 800212e:	2208      	movs	r2, #8
 8002130:	4629      	mov	r1, r5
 8002132:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002136:	f7ff fcc3 	bl	8001ac0 <memset>
 800213a:	6365      	str	r5, [r4, #52]	; 0x34
 800213c:	63a5      	str	r5, [r4, #56]	; 0x38
 800213e:	64a5      	str	r5, [r4, #72]	; 0x48
 8002140:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002142:	e7e6      	b.n	8002112 <__sfp+0x42>
 8002144:	08002c4c 	.word	0x08002c4c

08002148 <_fwalk_reent>:
 8002148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800214c:	4680      	mov	r8, r0
 800214e:	4689      	mov	r9, r1
 8002150:	2600      	movs	r6, #0
 8002152:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002156:	b914      	cbnz	r4, 800215e <_fwalk_reent+0x16>
 8002158:	4630      	mov	r0, r6
 800215a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800215e:	68a5      	ldr	r5, [r4, #8]
 8002160:	6867      	ldr	r7, [r4, #4]
 8002162:	3f01      	subs	r7, #1
 8002164:	d501      	bpl.n	800216a <_fwalk_reent+0x22>
 8002166:	6824      	ldr	r4, [r4, #0]
 8002168:	e7f5      	b.n	8002156 <_fwalk_reent+0xe>
 800216a:	89ab      	ldrh	r3, [r5, #12]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d907      	bls.n	8002180 <_fwalk_reent+0x38>
 8002170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002174:	3301      	adds	r3, #1
 8002176:	d003      	beq.n	8002180 <_fwalk_reent+0x38>
 8002178:	4629      	mov	r1, r5
 800217a:	4640      	mov	r0, r8
 800217c:	47c8      	blx	r9
 800217e:	4306      	orrs	r6, r0
 8002180:	3568      	adds	r5, #104	; 0x68
 8002182:	e7ee      	b.n	8002162 <_fwalk_reent+0x1a>

08002184 <__locale_ctype_ptr_l>:
 8002184:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002188:	4770      	bx	lr

0800218a <__swhatbuf_r>:
 800218a:	b570      	push	{r4, r5, r6, lr}
 800218c:	460e      	mov	r6, r1
 800218e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002192:	b090      	sub	sp, #64	; 0x40
 8002194:	2900      	cmp	r1, #0
 8002196:	4614      	mov	r4, r2
 8002198:	461d      	mov	r5, r3
 800219a:	da07      	bge.n	80021ac <__swhatbuf_r+0x22>
 800219c:	2300      	movs	r3, #0
 800219e:	602b      	str	r3, [r5, #0]
 80021a0:	89b3      	ldrh	r3, [r6, #12]
 80021a2:	061a      	lsls	r2, r3, #24
 80021a4:	d410      	bmi.n	80021c8 <__swhatbuf_r+0x3e>
 80021a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021aa:	e00e      	b.n	80021ca <__swhatbuf_r+0x40>
 80021ac:	aa01      	add	r2, sp, #4
 80021ae:	f000 fc77 	bl	8002aa0 <_fstat_r>
 80021b2:	2800      	cmp	r0, #0
 80021b4:	dbf2      	blt.n	800219c <__swhatbuf_r+0x12>
 80021b6:	9a02      	ldr	r2, [sp, #8]
 80021b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80021bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80021c0:	425a      	negs	r2, r3
 80021c2:	415a      	adcs	r2, r3
 80021c4:	602a      	str	r2, [r5, #0]
 80021c6:	e7ee      	b.n	80021a6 <__swhatbuf_r+0x1c>
 80021c8:	2340      	movs	r3, #64	; 0x40
 80021ca:	2000      	movs	r0, #0
 80021cc:	6023      	str	r3, [r4, #0]
 80021ce:	b010      	add	sp, #64	; 0x40
 80021d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080021d4 <__smakebuf_r>:
 80021d4:	898b      	ldrh	r3, [r1, #12]
 80021d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021d8:	079d      	lsls	r5, r3, #30
 80021da:	4606      	mov	r6, r0
 80021dc:	460c      	mov	r4, r1
 80021de:	d507      	bpl.n	80021f0 <__smakebuf_r+0x1c>
 80021e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80021e4:	6023      	str	r3, [r4, #0]
 80021e6:	6123      	str	r3, [r4, #16]
 80021e8:	2301      	movs	r3, #1
 80021ea:	6163      	str	r3, [r4, #20]
 80021ec:	b002      	add	sp, #8
 80021ee:	bd70      	pop	{r4, r5, r6, pc}
 80021f0:	ab01      	add	r3, sp, #4
 80021f2:	466a      	mov	r2, sp
 80021f4:	f7ff ffc9 	bl	800218a <__swhatbuf_r>
 80021f8:	9900      	ldr	r1, [sp, #0]
 80021fa:	4605      	mov	r5, r0
 80021fc:	4630      	mov	r0, r6
 80021fe:	f000 f887 	bl	8002310 <_malloc_r>
 8002202:	b948      	cbnz	r0, 8002218 <__smakebuf_r+0x44>
 8002204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002208:	059a      	lsls	r2, r3, #22
 800220a:	d4ef      	bmi.n	80021ec <__smakebuf_r+0x18>
 800220c:	f023 0303 	bic.w	r3, r3, #3
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	81a3      	strh	r3, [r4, #12]
 8002216:	e7e3      	b.n	80021e0 <__smakebuf_r+0xc>
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <__smakebuf_r+0x7c>)
 800221a:	62b3      	str	r3, [r6, #40]	; 0x28
 800221c:	89a3      	ldrh	r3, [r4, #12]
 800221e:	6020      	str	r0, [r4, #0]
 8002220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002224:	81a3      	strh	r3, [r4, #12]
 8002226:	9b00      	ldr	r3, [sp, #0]
 8002228:	6120      	str	r0, [r4, #16]
 800222a:	6163      	str	r3, [r4, #20]
 800222c:	9b01      	ldr	r3, [sp, #4]
 800222e:	b15b      	cbz	r3, 8002248 <__smakebuf_r+0x74>
 8002230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002234:	4630      	mov	r0, r6
 8002236:	f000 fc45 	bl	8002ac4 <_isatty_r>
 800223a:	b128      	cbz	r0, 8002248 <__smakebuf_r+0x74>
 800223c:	89a3      	ldrh	r3, [r4, #12]
 800223e:	f023 0303 	bic.w	r3, r3, #3
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	81a3      	strh	r3, [r4, #12]
 8002248:	89a3      	ldrh	r3, [r4, #12]
 800224a:	431d      	orrs	r5, r3
 800224c:	81a5      	strh	r5, [r4, #12]
 800224e:	e7cd      	b.n	80021ec <__smakebuf_r+0x18>
 8002250:	08001ff1 	.word	0x08001ff1

08002254 <__ascii_mbtowc>:
 8002254:	b082      	sub	sp, #8
 8002256:	b901      	cbnz	r1, 800225a <__ascii_mbtowc+0x6>
 8002258:	a901      	add	r1, sp, #4
 800225a:	b142      	cbz	r2, 800226e <__ascii_mbtowc+0x1a>
 800225c:	b14b      	cbz	r3, 8002272 <__ascii_mbtowc+0x1e>
 800225e:	7813      	ldrb	r3, [r2, #0]
 8002260:	600b      	str	r3, [r1, #0]
 8002262:	7812      	ldrb	r2, [r2, #0]
 8002264:	1c10      	adds	r0, r2, #0
 8002266:	bf18      	it	ne
 8002268:	2001      	movne	r0, #1
 800226a:	b002      	add	sp, #8
 800226c:	4770      	bx	lr
 800226e:	4610      	mov	r0, r2
 8002270:	e7fb      	b.n	800226a <__ascii_mbtowc+0x16>
 8002272:	f06f 0001 	mvn.w	r0, #1
 8002276:	e7f8      	b.n	800226a <__ascii_mbtowc+0x16>

08002278 <_free_r>:
 8002278:	b538      	push	{r3, r4, r5, lr}
 800227a:	4605      	mov	r5, r0
 800227c:	2900      	cmp	r1, #0
 800227e:	d043      	beq.n	8002308 <_free_r+0x90>
 8002280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002284:	1f0c      	subs	r4, r1, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	bfb8      	it	lt
 800228a:	18e4      	addlt	r4, r4, r3
 800228c:	f000 fc6f 	bl	8002b6e <__malloc_lock>
 8002290:	4a1e      	ldr	r2, [pc, #120]	; (800230c <_free_r+0x94>)
 8002292:	6813      	ldr	r3, [r2, #0]
 8002294:	4610      	mov	r0, r2
 8002296:	b933      	cbnz	r3, 80022a6 <_free_r+0x2e>
 8002298:	6063      	str	r3, [r4, #4]
 800229a:	6014      	str	r4, [r2, #0]
 800229c:	4628      	mov	r0, r5
 800229e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022a2:	f000 bc65 	b.w	8002b70 <__malloc_unlock>
 80022a6:	42a3      	cmp	r3, r4
 80022a8:	d90b      	bls.n	80022c2 <_free_r+0x4a>
 80022aa:	6821      	ldr	r1, [r4, #0]
 80022ac:	1862      	adds	r2, r4, r1
 80022ae:	4293      	cmp	r3, r2
 80022b0:	bf01      	itttt	eq
 80022b2:	681a      	ldreq	r2, [r3, #0]
 80022b4:	685b      	ldreq	r3, [r3, #4]
 80022b6:	1852      	addeq	r2, r2, r1
 80022b8:	6022      	streq	r2, [r4, #0]
 80022ba:	6063      	str	r3, [r4, #4]
 80022bc:	6004      	str	r4, [r0, #0]
 80022be:	e7ed      	b.n	800229c <_free_r+0x24>
 80022c0:	4613      	mov	r3, r2
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	b10a      	cbz	r2, 80022ca <_free_r+0x52>
 80022c6:	42a2      	cmp	r2, r4
 80022c8:	d9fa      	bls.n	80022c0 <_free_r+0x48>
 80022ca:	6819      	ldr	r1, [r3, #0]
 80022cc:	1858      	adds	r0, r3, r1
 80022ce:	42a0      	cmp	r0, r4
 80022d0:	d10b      	bne.n	80022ea <_free_r+0x72>
 80022d2:	6820      	ldr	r0, [r4, #0]
 80022d4:	4401      	add	r1, r0
 80022d6:	1858      	adds	r0, r3, r1
 80022d8:	4282      	cmp	r2, r0
 80022da:	6019      	str	r1, [r3, #0]
 80022dc:	d1de      	bne.n	800229c <_free_r+0x24>
 80022de:	6810      	ldr	r0, [r2, #0]
 80022e0:	6852      	ldr	r2, [r2, #4]
 80022e2:	4401      	add	r1, r0
 80022e4:	6019      	str	r1, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	e7d8      	b.n	800229c <_free_r+0x24>
 80022ea:	d902      	bls.n	80022f2 <_free_r+0x7a>
 80022ec:	230c      	movs	r3, #12
 80022ee:	602b      	str	r3, [r5, #0]
 80022f0:	e7d4      	b.n	800229c <_free_r+0x24>
 80022f2:	6820      	ldr	r0, [r4, #0]
 80022f4:	1821      	adds	r1, r4, r0
 80022f6:	428a      	cmp	r2, r1
 80022f8:	bf01      	itttt	eq
 80022fa:	6811      	ldreq	r1, [r2, #0]
 80022fc:	6852      	ldreq	r2, [r2, #4]
 80022fe:	1809      	addeq	r1, r1, r0
 8002300:	6021      	streq	r1, [r4, #0]
 8002302:	6062      	str	r2, [r4, #4]
 8002304:	605c      	str	r4, [r3, #4]
 8002306:	e7c9      	b.n	800229c <_free_r+0x24>
 8002308:	bd38      	pop	{r3, r4, r5, pc}
 800230a:	bf00      	nop
 800230c:	200001fc 	.word	0x200001fc

08002310 <_malloc_r>:
 8002310:	b570      	push	{r4, r5, r6, lr}
 8002312:	1ccd      	adds	r5, r1, #3
 8002314:	f025 0503 	bic.w	r5, r5, #3
 8002318:	3508      	adds	r5, #8
 800231a:	2d0c      	cmp	r5, #12
 800231c:	bf38      	it	cc
 800231e:	250c      	movcc	r5, #12
 8002320:	2d00      	cmp	r5, #0
 8002322:	4606      	mov	r6, r0
 8002324:	db01      	blt.n	800232a <_malloc_r+0x1a>
 8002326:	42a9      	cmp	r1, r5
 8002328:	d903      	bls.n	8002332 <_malloc_r+0x22>
 800232a:	230c      	movs	r3, #12
 800232c:	6033      	str	r3, [r6, #0]
 800232e:	2000      	movs	r0, #0
 8002330:	bd70      	pop	{r4, r5, r6, pc}
 8002332:	f000 fc1c 	bl	8002b6e <__malloc_lock>
 8002336:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <_malloc_r+0xb4>)
 8002338:	6814      	ldr	r4, [r2, #0]
 800233a:	4621      	mov	r1, r4
 800233c:	b991      	cbnz	r1, 8002364 <_malloc_r+0x54>
 800233e:	4c22      	ldr	r4, [pc, #136]	; (80023c8 <_malloc_r+0xb8>)
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	b91b      	cbnz	r3, 800234c <_malloc_r+0x3c>
 8002344:	4630      	mov	r0, r6
 8002346:	f000 fb29 	bl	800299c <_sbrk_r>
 800234a:	6020      	str	r0, [r4, #0]
 800234c:	4629      	mov	r1, r5
 800234e:	4630      	mov	r0, r6
 8002350:	f000 fb24 	bl	800299c <_sbrk_r>
 8002354:	1c43      	adds	r3, r0, #1
 8002356:	d126      	bne.n	80023a6 <_malloc_r+0x96>
 8002358:	230c      	movs	r3, #12
 800235a:	4630      	mov	r0, r6
 800235c:	6033      	str	r3, [r6, #0]
 800235e:	f000 fc07 	bl	8002b70 <__malloc_unlock>
 8002362:	e7e4      	b.n	800232e <_malloc_r+0x1e>
 8002364:	680b      	ldr	r3, [r1, #0]
 8002366:	1b5b      	subs	r3, r3, r5
 8002368:	d41a      	bmi.n	80023a0 <_malloc_r+0x90>
 800236a:	2b0b      	cmp	r3, #11
 800236c:	d90f      	bls.n	800238e <_malloc_r+0x7e>
 800236e:	600b      	str	r3, [r1, #0]
 8002370:	18cc      	adds	r4, r1, r3
 8002372:	50cd      	str	r5, [r1, r3]
 8002374:	4630      	mov	r0, r6
 8002376:	f000 fbfb 	bl	8002b70 <__malloc_unlock>
 800237a:	f104 000b 	add.w	r0, r4, #11
 800237e:	1d23      	adds	r3, r4, #4
 8002380:	f020 0007 	bic.w	r0, r0, #7
 8002384:	1ac3      	subs	r3, r0, r3
 8002386:	d01b      	beq.n	80023c0 <_malloc_r+0xb0>
 8002388:	425a      	negs	r2, r3
 800238a:	50e2      	str	r2, [r4, r3]
 800238c:	bd70      	pop	{r4, r5, r6, pc}
 800238e:	428c      	cmp	r4, r1
 8002390:	bf0b      	itete	eq
 8002392:	6863      	ldreq	r3, [r4, #4]
 8002394:	684b      	ldrne	r3, [r1, #4]
 8002396:	6013      	streq	r3, [r2, #0]
 8002398:	6063      	strne	r3, [r4, #4]
 800239a:	bf18      	it	ne
 800239c:	460c      	movne	r4, r1
 800239e:	e7e9      	b.n	8002374 <_malloc_r+0x64>
 80023a0:	460c      	mov	r4, r1
 80023a2:	6849      	ldr	r1, [r1, #4]
 80023a4:	e7ca      	b.n	800233c <_malloc_r+0x2c>
 80023a6:	1cc4      	adds	r4, r0, #3
 80023a8:	f024 0403 	bic.w	r4, r4, #3
 80023ac:	42a0      	cmp	r0, r4
 80023ae:	d005      	beq.n	80023bc <_malloc_r+0xac>
 80023b0:	1a21      	subs	r1, r4, r0
 80023b2:	4630      	mov	r0, r6
 80023b4:	f000 faf2 	bl	800299c <_sbrk_r>
 80023b8:	3001      	adds	r0, #1
 80023ba:	d0cd      	beq.n	8002358 <_malloc_r+0x48>
 80023bc:	6025      	str	r5, [r4, #0]
 80023be:	e7d9      	b.n	8002374 <_malloc_r+0x64>
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
 80023c2:	bf00      	nop
 80023c4:	200001fc 	.word	0x200001fc
 80023c8:	20000200 	.word	0x20000200

080023cc <__ssputs_r>:
 80023cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023d0:	688e      	ldr	r6, [r1, #8]
 80023d2:	4682      	mov	sl, r0
 80023d4:	429e      	cmp	r6, r3
 80023d6:	460c      	mov	r4, r1
 80023d8:	4691      	mov	r9, r2
 80023da:	4698      	mov	r8, r3
 80023dc:	d835      	bhi.n	800244a <__ssputs_r+0x7e>
 80023de:	898a      	ldrh	r2, [r1, #12]
 80023e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80023e4:	d031      	beq.n	800244a <__ssputs_r+0x7e>
 80023e6:	2302      	movs	r3, #2
 80023e8:	6825      	ldr	r5, [r4, #0]
 80023ea:	6909      	ldr	r1, [r1, #16]
 80023ec:	1a6f      	subs	r7, r5, r1
 80023ee:	6965      	ldr	r5, [r4, #20]
 80023f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80023f8:	f108 0301 	add.w	r3, r8, #1
 80023fc:	443b      	add	r3, r7
 80023fe:	429d      	cmp	r5, r3
 8002400:	bf38      	it	cc
 8002402:	461d      	movcc	r5, r3
 8002404:	0553      	lsls	r3, r2, #21
 8002406:	d531      	bpl.n	800246c <__ssputs_r+0xa0>
 8002408:	4629      	mov	r1, r5
 800240a:	f7ff ff81 	bl	8002310 <_malloc_r>
 800240e:	4606      	mov	r6, r0
 8002410:	b950      	cbnz	r0, 8002428 <__ssputs_r+0x5c>
 8002412:	230c      	movs	r3, #12
 8002414:	f8ca 3000 	str.w	r3, [sl]
 8002418:	89a3      	ldrh	r3, [r4, #12]
 800241a:	f04f 30ff 	mov.w	r0, #4294967295
 800241e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002422:	81a3      	strh	r3, [r4, #12]
 8002424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002428:	463a      	mov	r2, r7
 800242a:	6921      	ldr	r1, [r4, #16]
 800242c:	f000 fb7a 	bl	8002b24 <memcpy>
 8002430:	89a3      	ldrh	r3, [r4, #12]
 8002432:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800243a:	81a3      	strh	r3, [r4, #12]
 800243c:	6126      	str	r6, [r4, #16]
 800243e:	443e      	add	r6, r7
 8002440:	6026      	str	r6, [r4, #0]
 8002442:	4646      	mov	r6, r8
 8002444:	6165      	str	r5, [r4, #20]
 8002446:	1bed      	subs	r5, r5, r7
 8002448:	60a5      	str	r5, [r4, #8]
 800244a:	4546      	cmp	r6, r8
 800244c:	bf28      	it	cs
 800244e:	4646      	movcs	r6, r8
 8002450:	4649      	mov	r1, r9
 8002452:	4632      	mov	r2, r6
 8002454:	6820      	ldr	r0, [r4, #0]
 8002456:	f000 fb70 	bl	8002b3a <memmove>
 800245a:	68a3      	ldr	r3, [r4, #8]
 800245c:	2000      	movs	r0, #0
 800245e:	1b9b      	subs	r3, r3, r6
 8002460:	60a3      	str	r3, [r4, #8]
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	441e      	add	r6, r3
 8002466:	6026      	str	r6, [r4, #0]
 8002468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800246c:	462a      	mov	r2, r5
 800246e:	f000 fb80 	bl	8002b72 <_realloc_r>
 8002472:	4606      	mov	r6, r0
 8002474:	2800      	cmp	r0, #0
 8002476:	d1e1      	bne.n	800243c <__ssputs_r+0x70>
 8002478:	6921      	ldr	r1, [r4, #16]
 800247a:	4650      	mov	r0, sl
 800247c:	f7ff fefc 	bl	8002278 <_free_r>
 8002480:	e7c7      	b.n	8002412 <__ssputs_r+0x46>
	...

08002484 <_svfiprintf_r>:
 8002484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002488:	b09d      	sub	sp, #116	; 0x74
 800248a:	9303      	str	r3, [sp, #12]
 800248c:	898b      	ldrh	r3, [r1, #12]
 800248e:	4680      	mov	r8, r0
 8002490:	061c      	lsls	r4, r3, #24
 8002492:	460d      	mov	r5, r1
 8002494:	4616      	mov	r6, r2
 8002496:	d50f      	bpl.n	80024b8 <_svfiprintf_r+0x34>
 8002498:	690b      	ldr	r3, [r1, #16]
 800249a:	b96b      	cbnz	r3, 80024b8 <_svfiprintf_r+0x34>
 800249c:	2140      	movs	r1, #64	; 0x40
 800249e:	f7ff ff37 	bl	8002310 <_malloc_r>
 80024a2:	6028      	str	r0, [r5, #0]
 80024a4:	6128      	str	r0, [r5, #16]
 80024a6:	b928      	cbnz	r0, 80024b4 <_svfiprintf_r+0x30>
 80024a8:	230c      	movs	r3, #12
 80024aa:	f8c8 3000 	str.w	r3, [r8]
 80024ae:	f04f 30ff 	mov.w	r0, #4294967295
 80024b2:	e0c4      	b.n	800263e <_svfiprintf_r+0x1ba>
 80024b4:	2340      	movs	r3, #64	; 0x40
 80024b6:	616b      	str	r3, [r5, #20]
 80024b8:	2300      	movs	r3, #0
 80024ba:	9309      	str	r3, [sp, #36]	; 0x24
 80024bc:	2320      	movs	r3, #32
 80024be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024c2:	2330      	movs	r3, #48	; 0x30
 80024c4:	f04f 0b01 	mov.w	fp, #1
 80024c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024cc:	4637      	mov	r7, r6
 80024ce:	463c      	mov	r4, r7
 80024d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d13c      	bne.n	8002552 <_svfiprintf_r+0xce>
 80024d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80024dc:	d00b      	beq.n	80024f6 <_svfiprintf_r+0x72>
 80024de:	4653      	mov	r3, sl
 80024e0:	4632      	mov	r2, r6
 80024e2:	4629      	mov	r1, r5
 80024e4:	4640      	mov	r0, r8
 80024e6:	f7ff ff71 	bl	80023cc <__ssputs_r>
 80024ea:	3001      	adds	r0, #1
 80024ec:	f000 80a2 	beq.w	8002634 <_svfiprintf_r+0x1b0>
 80024f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024f2:	4453      	add	r3, sl
 80024f4:	9309      	str	r3, [sp, #36]	; 0x24
 80024f6:	783b      	ldrb	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 809b 	beq.w	8002634 <_svfiprintf_r+0x1b0>
 80024fe:	2300      	movs	r3, #0
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	9304      	str	r3, [sp, #16]
 8002506:	9307      	str	r3, [sp, #28]
 8002508:	9205      	str	r2, [sp, #20]
 800250a:	9306      	str	r3, [sp, #24]
 800250c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002510:	931a      	str	r3, [sp, #104]	; 0x68
 8002512:	2205      	movs	r2, #5
 8002514:	7821      	ldrb	r1, [r4, #0]
 8002516:	4850      	ldr	r0, [pc, #320]	; (8002658 <_svfiprintf_r+0x1d4>)
 8002518:	f000 faf6 	bl	8002b08 <memchr>
 800251c:	1c67      	adds	r7, r4, #1
 800251e:	9b04      	ldr	r3, [sp, #16]
 8002520:	b9d8      	cbnz	r0, 800255a <_svfiprintf_r+0xd6>
 8002522:	06d9      	lsls	r1, r3, #27
 8002524:	bf44      	itt	mi
 8002526:	2220      	movmi	r2, #32
 8002528:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800252c:	071a      	lsls	r2, r3, #28
 800252e:	bf44      	itt	mi
 8002530:	222b      	movmi	r2, #43	; 0x2b
 8002532:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002536:	7822      	ldrb	r2, [r4, #0]
 8002538:	2a2a      	cmp	r2, #42	; 0x2a
 800253a:	d016      	beq.n	800256a <_svfiprintf_r+0xe6>
 800253c:	2100      	movs	r1, #0
 800253e:	200a      	movs	r0, #10
 8002540:	9a07      	ldr	r2, [sp, #28]
 8002542:	4627      	mov	r7, r4
 8002544:	783b      	ldrb	r3, [r7, #0]
 8002546:	3401      	adds	r4, #1
 8002548:	3b30      	subs	r3, #48	; 0x30
 800254a:	2b09      	cmp	r3, #9
 800254c:	d950      	bls.n	80025f0 <_svfiprintf_r+0x16c>
 800254e:	b1c9      	cbz	r1, 8002584 <_svfiprintf_r+0x100>
 8002550:	e011      	b.n	8002576 <_svfiprintf_r+0xf2>
 8002552:	2b25      	cmp	r3, #37	; 0x25
 8002554:	d0c0      	beq.n	80024d8 <_svfiprintf_r+0x54>
 8002556:	4627      	mov	r7, r4
 8002558:	e7b9      	b.n	80024ce <_svfiprintf_r+0x4a>
 800255a:	4a3f      	ldr	r2, [pc, #252]	; (8002658 <_svfiprintf_r+0x1d4>)
 800255c:	463c      	mov	r4, r7
 800255e:	1a80      	subs	r0, r0, r2
 8002560:	fa0b f000 	lsl.w	r0, fp, r0
 8002564:	4318      	orrs	r0, r3
 8002566:	9004      	str	r0, [sp, #16]
 8002568:	e7d3      	b.n	8002512 <_svfiprintf_r+0x8e>
 800256a:	9a03      	ldr	r2, [sp, #12]
 800256c:	1d11      	adds	r1, r2, #4
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	9103      	str	r1, [sp, #12]
 8002572:	2a00      	cmp	r2, #0
 8002574:	db01      	blt.n	800257a <_svfiprintf_r+0xf6>
 8002576:	9207      	str	r2, [sp, #28]
 8002578:	e004      	b.n	8002584 <_svfiprintf_r+0x100>
 800257a:	4252      	negs	r2, r2
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	9207      	str	r2, [sp, #28]
 8002582:	9304      	str	r3, [sp, #16]
 8002584:	783b      	ldrb	r3, [r7, #0]
 8002586:	2b2e      	cmp	r3, #46	; 0x2e
 8002588:	d10d      	bne.n	80025a6 <_svfiprintf_r+0x122>
 800258a:	787b      	ldrb	r3, [r7, #1]
 800258c:	1c79      	adds	r1, r7, #1
 800258e:	2b2a      	cmp	r3, #42	; 0x2a
 8002590:	d132      	bne.n	80025f8 <_svfiprintf_r+0x174>
 8002592:	9b03      	ldr	r3, [sp, #12]
 8002594:	3702      	adds	r7, #2
 8002596:	1d1a      	adds	r2, r3, #4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	9203      	str	r2, [sp, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	bfb8      	it	lt
 80025a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80025a4:	9305      	str	r3, [sp, #20]
 80025a6:	4c2d      	ldr	r4, [pc, #180]	; (800265c <_svfiprintf_r+0x1d8>)
 80025a8:	2203      	movs	r2, #3
 80025aa:	7839      	ldrb	r1, [r7, #0]
 80025ac:	4620      	mov	r0, r4
 80025ae:	f000 faab 	bl	8002b08 <memchr>
 80025b2:	b138      	cbz	r0, 80025c4 <_svfiprintf_r+0x140>
 80025b4:	2340      	movs	r3, #64	; 0x40
 80025b6:	1b00      	subs	r0, r0, r4
 80025b8:	fa03 f000 	lsl.w	r0, r3, r0
 80025bc:	9b04      	ldr	r3, [sp, #16]
 80025be:	3701      	adds	r7, #1
 80025c0:	4303      	orrs	r3, r0
 80025c2:	9304      	str	r3, [sp, #16]
 80025c4:	7839      	ldrb	r1, [r7, #0]
 80025c6:	2206      	movs	r2, #6
 80025c8:	4825      	ldr	r0, [pc, #148]	; (8002660 <_svfiprintf_r+0x1dc>)
 80025ca:	1c7e      	adds	r6, r7, #1
 80025cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025d0:	f000 fa9a 	bl	8002b08 <memchr>
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d035      	beq.n	8002644 <_svfiprintf_r+0x1c0>
 80025d8:	4b22      	ldr	r3, [pc, #136]	; (8002664 <_svfiprintf_r+0x1e0>)
 80025da:	b9fb      	cbnz	r3, 800261c <_svfiprintf_r+0x198>
 80025dc:	9b03      	ldr	r3, [sp, #12]
 80025de:	3307      	adds	r3, #7
 80025e0:	f023 0307 	bic.w	r3, r3, #7
 80025e4:	3308      	adds	r3, #8
 80025e6:	9303      	str	r3, [sp, #12]
 80025e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025ea:	444b      	add	r3, r9
 80025ec:	9309      	str	r3, [sp, #36]	; 0x24
 80025ee:	e76d      	b.n	80024cc <_svfiprintf_r+0x48>
 80025f0:	fb00 3202 	mla	r2, r0, r2, r3
 80025f4:	2101      	movs	r1, #1
 80025f6:	e7a4      	b.n	8002542 <_svfiprintf_r+0xbe>
 80025f8:	2300      	movs	r3, #0
 80025fa:	240a      	movs	r4, #10
 80025fc:	4618      	mov	r0, r3
 80025fe:	9305      	str	r3, [sp, #20]
 8002600:	460f      	mov	r7, r1
 8002602:	783a      	ldrb	r2, [r7, #0]
 8002604:	3101      	adds	r1, #1
 8002606:	3a30      	subs	r2, #48	; 0x30
 8002608:	2a09      	cmp	r2, #9
 800260a:	d903      	bls.n	8002614 <_svfiprintf_r+0x190>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ca      	beq.n	80025a6 <_svfiprintf_r+0x122>
 8002610:	9005      	str	r0, [sp, #20]
 8002612:	e7c8      	b.n	80025a6 <_svfiprintf_r+0x122>
 8002614:	fb04 2000 	mla	r0, r4, r0, r2
 8002618:	2301      	movs	r3, #1
 800261a:	e7f1      	b.n	8002600 <_svfiprintf_r+0x17c>
 800261c:	ab03      	add	r3, sp, #12
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	462a      	mov	r2, r5
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <_svfiprintf_r+0x1e4>)
 8002624:	a904      	add	r1, sp, #16
 8002626:	4640      	mov	r0, r8
 8002628:	f3af 8000 	nop.w
 800262c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002630:	4681      	mov	r9, r0
 8002632:	d1d9      	bne.n	80025e8 <_svfiprintf_r+0x164>
 8002634:	89ab      	ldrh	r3, [r5, #12]
 8002636:	065b      	lsls	r3, r3, #25
 8002638:	f53f af39 	bmi.w	80024ae <_svfiprintf_r+0x2a>
 800263c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800263e:	b01d      	add	sp, #116	; 0x74
 8002640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002644:	ab03      	add	r3, sp, #12
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	462a      	mov	r2, r5
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <_svfiprintf_r+0x1e4>)
 800264c:	a904      	add	r1, sp, #16
 800264e:	4640      	mov	r0, r8
 8002650:	f000 f884 	bl	800275c <_printf_i>
 8002654:	e7ea      	b.n	800262c <_svfiprintf_r+0x1a8>
 8002656:	bf00      	nop
 8002658:	08002cba 	.word	0x08002cba
 800265c:	08002cc0 	.word	0x08002cc0
 8002660:	08002cc4 	.word	0x08002cc4
 8002664:	00000000 	.word	0x00000000
 8002668:	080023cd 	.word	0x080023cd

0800266c <_printf_common>:
 800266c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002670:	4691      	mov	r9, r2
 8002672:	461f      	mov	r7, r3
 8002674:	688a      	ldr	r2, [r1, #8]
 8002676:	690b      	ldr	r3, [r1, #16]
 8002678:	4606      	mov	r6, r0
 800267a:	4293      	cmp	r3, r2
 800267c:	bfb8      	it	lt
 800267e:	4613      	movlt	r3, r2
 8002680:	f8c9 3000 	str.w	r3, [r9]
 8002684:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002688:	460c      	mov	r4, r1
 800268a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800268e:	b112      	cbz	r2, 8002696 <_printf_common+0x2a>
 8002690:	3301      	adds	r3, #1
 8002692:	f8c9 3000 	str.w	r3, [r9]
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	0699      	lsls	r1, r3, #26
 800269a:	bf42      	ittt	mi
 800269c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80026a0:	3302      	addmi	r3, #2
 80026a2:	f8c9 3000 	strmi.w	r3, [r9]
 80026a6:	6825      	ldr	r5, [r4, #0]
 80026a8:	f015 0506 	ands.w	r5, r5, #6
 80026ac:	d107      	bne.n	80026be <_printf_common+0x52>
 80026ae:	f104 0a19 	add.w	sl, r4, #25
 80026b2:	68e3      	ldr	r3, [r4, #12]
 80026b4:	f8d9 2000 	ldr.w	r2, [r9]
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	429d      	cmp	r5, r3
 80026bc:	db2a      	blt.n	8002714 <_printf_common+0xa8>
 80026be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80026c2:	6822      	ldr	r2, [r4, #0]
 80026c4:	3300      	adds	r3, #0
 80026c6:	bf18      	it	ne
 80026c8:	2301      	movne	r3, #1
 80026ca:	0692      	lsls	r2, r2, #26
 80026cc:	d42f      	bmi.n	800272e <_printf_common+0xc2>
 80026ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026d2:	4639      	mov	r1, r7
 80026d4:	4630      	mov	r0, r6
 80026d6:	47c0      	blx	r8
 80026d8:	3001      	adds	r0, #1
 80026da:	d022      	beq.n	8002722 <_printf_common+0xb6>
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	68e5      	ldr	r5, [r4, #12]
 80026e0:	f003 0306 	and.w	r3, r3, #6
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	bf18      	it	ne
 80026e8:	2500      	movne	r5, #0
 80026ea:	f8d9 2000 	ldr.w	r2, [r9]
 80026ee:	f04f 0900 	mov.w	r9, #0
 80026f2:	bf08      	it	eq
 80026f4:	1aad      	subeq	r5, r5, r2
 80026f6:	68a3      	ldr	r3, [r4, #8]
 80026f8:	6922      	ldr	r2, [r4, #16]
 80026fa:	bf08      	it	eq
 80026fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002700:	4293      	cmp	r3, r2
 8002702:	bfc4      	itt	gt
 8002704:	1a9b      	subgt	r3, r3, r2
 8002706:	18ed      	addgt	r5, r5, r3
 8002708:	341a      	adds	r4, #26
 800270a:	454d      	cmp	r5, r9
 800270c:	d11b      	bne.n	8002746 <_printf_common+0xda>
 800270e:	2000      	movs	r0, #0
 8002710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002714:	2301      	movs	r3, #1
 8002716:	4652      	mov	r2, sl
 8002718:	4639      	mov	r1, r7
 800271a:	4630      	mov	r0, r6
 800271c:	47c0      	blx	r8
 800271e:	3001      	adds	r0, #1
 8002720:	d103      	bne.n	800272a <_printf_common+0xbe>
 8002722:	f04f 30ff 	mov.w	r0, #4294967295
 8002726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800272a:	3501      	adds	r5, #1
 800272c:	e7c1      	b.n	80026b2 <_printf_common+0x46>
 800272e:	2030      	movs	r0, #48	; 0x30
 8002730:	18e1      	adds	r1, r4, r3
 8002732:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800273c:	4422      	add	r2, r4
 800273e:	3302      	adds	r3, #2
 8002740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002744:	e7c3      	b.n	80026ce <_printf_common+0x62>
 8002746:	2301      	movs	r3, #1
 8002748:	4622      	mov	r2, r4
 800274a:	4639      	mov	r1, r7
 800274c:	4630      	mov	r0, r6
 800274e:	47c0      	blx	r8
 8002750:	3001      	adds	r0, #1
 8002752:	d0e6      	beq.n	8002722 <_printf_common+0xb6>
 8002754:	f109 0901 	add.w	r9, r9, #1
 8002758:	e7d7      	b.n	800270a <_printf_common+0x9e>
	...

0800275c <_printf_i>:
 800275c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002760:	4617      	mov	r7, r2
 8002762:	7e0a      	ldrb	r2, [r1, #24]
 8002764:	b085      	sub	sp, #20
 8002766:	2a6e      	cmp	r2, #110	; 0x6e
 8002768:	4698      	mov	r8, r3
 800276a:	4606      	mov	r6, r0
 800276c:	460c      	mov	r4, r1
 800276e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002770:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002774:	f000 80bc 	beq.w	80028f0 <_printf_i+0x194>
 8002778:	d81a      	bhi.n	80027b0 <_printf_i+0x54>
 800277a:	2a63      	cmp	r2, #99	; 0x63
 800277c:	d02e      	beq.n	80027dc <_printf_i+0x80>
 800277e:	d80a      	bhi.n	8002796 <_printf_i+0x3a>
 8002780:	2a00      	cmp	r2, #0
 8002782:	f000 80c8 	beq.w	8002916 <_printf_i+0x1ba>
 8002786:	2a58      	cmp	r2, #88	; 0x58
 8002788:	f000 808a 	beq.w	80028a0 <_printf_i+0x144>
 800278c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002790:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002794:	e02a      	b.n	80027ec <_printf_i+0x90>
 8002796:	2a64      	cmp	r2, #100	; 0x64
 8002798:	d001      	beq.n	800279e <_printf_i+0x42>
 800279a:	2a69      	cmp	r2, #105	; 0x69
 800279c:	d1f6      	bne.n	800278c <_printf_i+0x30>
 800279e:	6821      	ldr	r1, [r4, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80027a6:	d023      	beq.n	80027f0 <_printf_i+0x94>
 80027a8:	1d11      	adds	r1, r2, #4
 80027aa:	6019      	str	r1, [r3, #0]
 80027ac:	6813      	ldr	r3, [r2, #0]
 80027ae:	e027      	b.n	8002800 <_printf_i+0xa4>
 80027b0:	2a73      	cmp	r2, #115	; 0x73
 80027b2:	f000 80b4 	beq.w	800291e <_printf_i+0x1c2>
 80027b6:	d808      	bhi.n	80027ca <_printf_i+0x6e>
 80027b8:	2a6f      	cmp	r2, #111	; 0x6f
 80027ba:	d02a      	beq.n	8002812 <_printf_i+0xb6>
 80027bc:	2a70      	cmp	r2, #112	; 0x70
 80027be:	d1e5      	bne.n	800278c <_printf_i+0x30>
 80027c0:	680a      	ldr	r2, [r1, #0]
 80027c2:	f042 0220 	orr.w	r2, r2, #32
 80027c6:	600a      	str	r2, [r1, #0]
 80027c8:	e003      	b.n	80027d2 <_printf_i+0x76>
 80027ca:	2a75      	cmp	r2, #117	; 0x75
 80027cc:	d021      	beq.n	8002812 <_printf_i+0xb6>
 80027ce:	2a78      	cmp	r2, #120	; 0x78
 80027d0:	d1dc      	bne.n	800278c <_printf_i+0x30>
 80027d2:	2278      	movs	r2, #120	; 0x78
 80027d4:	496f      	ldr	r1, [pc, #444]	; (8002994 <_printf_i+0x238>)
 80027d6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80027da:	e064      	b.n	80028a6 <_printf_i+0x14a>
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80027e2:	1d11      	adds	r1, r2, #4
 80027e4:	6019      	str	r1, [r3, #0]
 80027e6:	6813      	ldr	r3, [r2, #0]
 80027e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0a3      	b.n	8002938 <_printf_i+0x1dc>
 80027f0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80027f4:	f102 0104 	add.w	r1, r2, #4
 80027f8:	6019      	str	r1, [r3, #0]
 80027fa:	d0d7      	beq.n	80027ac <_printf_i+0x50>
 80027fc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002800:	2b00      	cmp	r3, #0
 8002802:	da03      	bge.n	800280c <_printf_i+0xb0>
 8002804:	222d      	movs	r2, #45	; 0x2d
 8002806:	425b      	negs	r3, r3
 8002808:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800280c:	4962      	ldr	r1, [pc, #392]	; (8002998 <_printf_i+0x23c>)
 800280e:	220a      	movs	r2, #10
 8002810:	e017      	b.n	8002842 <_printf_i+0xe6>
 8002812:	6820      	ldr	r0, [r4, #0]
 8002814:	6819      	ldr	r1, [r3, #0]
 8002816:	f010 0f80 	tst.w	r0, #128	; 0x80
 800281a:	d003      	beq.n	8002824 <_printf_i+0xc8>
 800281c:	1d08      	adds	r0, r1, #4
 800281e:	6018      	str	r0, [r3, #0]
 8002820:	680b      	ldr	r3, [r1, #0]
 8002822:	e006      	b.n	8002832 <_printf_i+0xd6>
 8002824:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002828:	f101 0004 	add.w	r0, r1, #4
 800282c:	6018      	str	r0, [r3, #0]
 800282e:	d0f7      	beq.n	8002820 <_printf_i+0xc4>
 8002830:	880b      	ldrh	r3, [r1, #0]
 8002832:	2a6f      	cmp	r2, #111	; 0x6f
 8002834:	bf14      	ite	ne
 8002836:	220a      	movne	r2, #10
 8002838:	2208      	moveq	r2, #8
 800283a:	4957      	ldr	r1, [pc, #348]	; (8002998 <_printf_i+0x23c>)
 800283c:	2000      	movs	r0, #0
 800283e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002842:	6865      	ldr	r5, [r4, #4]
 8002844:	2d00      	cmp	r5, #0
 8002846:	60a5      	str	r5, [r4, #8]
 8002848:	f2c0 809c 	blt.w	8002984 <_printf_i+0x228>
 800284c:	6820      	ldr	r0, [r4, #0]
 800284e:	f020 0004 	bic.w	r0, r0, #4
 8002852:	6020      	str	r0, [r4, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d13f      	bne.n	80028d8 <_printf_i+0x17c>
 8002858:	2d00      	cmp	r5, #0
 800285a:	f040 8095 	bne.w	8002988 <_printf_i+0x22c>
 800285e:	4675      	mov	r5, lr
 8002860:	2a08      	cmp	r2, #8
 8002862:	d10b      	bne.n	800287c <_printf_i+0x120>
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	07da      	lsls	r2, r3, #31
 8002868:	d508      	bpl.n	800287c <_printf_i+0x120>
 800286a:	6923      	ldr	r3, [r4, #16]
 800286c:	6862      	ldr	r2, [r4, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	bfde      	ittt	le
 8002872:	2330      	movle	r3, #48	; 0x30
 8002874:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002878:	f105 35ff 	addle.w	r5, r5, #4294967295
 800287c:	ebae 0305 	sub.w	r3, lr, r5
 8002880:	6123      	str	r3, [r4, #16]
 8002882:	f8cd 8000 	str.w	r8, [sp]
 8002886:	463b      	mov	r3, r7
 8002888:	aa03      	add	r2, sp, #12
 800288a:	4621      	mov	r1, r4
 800288c:	4630      	mov	r0, r6
 800288e:	f7ff feed 	bl	800266c <_printf_common>
 8002892:	3001      	adds	r0, #1
 8002894:	d155      	bne.n	8002942 <_printf_i+0x1e6>
 8002896:	f04f 30ff 	mov.w	r0, #4294967295
 800289a:	b005      	add	sp, #20
 800289c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028a0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80028a4:	493c      	ldr	r1, [pc, #240]	; (8002998 <_printf_i+0x23c>)
 80028a6:	6822      	ldr	r2, [r4, #0]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028ae:	f100 0504 	add.w	r5, r0, #4
 80028b2:	601d      	str	r5, [r3, #0]
 80028b4:	d001      	beq.n	80028ba <_printf_i+0x15e>
 80028b6:	6803      	ldr	r3, [r0, #0]
 80028b8:	e002      	b.n	80028c0 <_printf_i+0x164>
 80028ba:	0655      	lsls	r5, r2, #25
 80028bc:	d5fb      	bpl.n	80028b6 <_printf_i+0x15a>
 80028be:	8803      	ldrh	r3, [r0, #0]
 80028c0:	07d0      	lsls	r0, r2, #31
 80028c2:	bf44      	itt	mi
 80028c4:	f042 0220 	orrmi.w	r2, r2, #32
 80028c8:	6022      	strmi	r2, [r4, #0]
 80028ca:	b91b      	cbnz	r3, 80028d4 <_printf_i+0x178>
 80028cc:	6822      	ldr	r2, [r4, #0]
 80028ce:	f022 0220 	bic.w	r2, r2, #32
 80028d2:	6022      	str	r2, [r4, #0]
 80028d4:	2210      	movs	r2, #16
 80028d6:	e7b1      	b.n	800283c <_printf_i+0xe0>
 80028d8:	4675      	mov	r5, lr
 80028da:	fbb3 f0f2 	udiv	r0, r3, r2
 80028de:	fb02 3310 	mls	r3, r2, r0, r3
 80028e2:	5ccb      	ldrb	r3, [r1, r3]
 80028e4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80028e8:	4603      	mov	r3, r0
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d1f5      	bne.n	80028da <_printf_i+0x17e>
 80028ee:	e7b7      	b.n	8002860 <_printf_i+0x104>
 80028f0:	6808      	ldr	r0, [r1, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80028f8:	6949      	ldr	r1, [r1, #20]
 80028fa:	d004      	beq.n	8002906 <_printf_i+0x1aa>
 80028fc:	1d10      	adds	r0, r2, #4
 80028fe:	6018      	str	r0, [r3, #0]
 8002900:	6813      	ldr	r3, [r2, #0]
 8002902:	6019      	str	r1, [r3, #0]
 8002904:	e007      	b.n	8002916 <_printf_i+0x1ba>
 8002906:	f010 0f40 	tst.w	r0, #64	; 0x40
 800290a:	f102 0004 	add.w	r0, r2, #4
 800290e:	6018      	str	r0, [r3, #0]
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	d0f6      	beq.n	8002902 <_printf_i+0x1a6>
 8002914:	8019      	strh	r1, [r3, #0]
 8002916:	2300      	movs	r3, #0
 8002918:	4675      	mov	r5, lr
 800291a:	6123      	str	r3, [r4, #16]
 800291c:	e7b1      	b.n	8002882 <_printf_i+0x126>
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	1d11      	adds	r1, r2, #4
 8002922:	6019      	str	r1, [r3, #0]
 8002924:	6815      	ldr	r5, [r2, #0]
 8002926:	2100      	movs	r1, #0
 8002928:	6862      	ldr	r2, [r4, #4]
 800292a:	4628      	mov	r0, r5
 800292c:	f000 f8ec 	bl	8002b08 <memchr>
 8002930:	b108      	cbz	r0, 8002936 <_printf_i+0x1da>
 8002932:	1b40      	subs	r0, r0, r5
 8002934:	6060      	str	r0, [r4, #4]
 8002936:	6863      	ldr	r3, [r4, #4]
 8002938:	6123      	str	r3, [r4, #16]
 800293a:	2300      	movs	r3, #0
 800293c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002940:	e79f      	b.n	8002882 <_printf_i+0x126>
 8002942:	6923      	ldr	r3, [r4, #16]
 8002944:	462a      	mov	r2, r5
 8002946:	4639      	mov	r1, r7
 8002948:	4630      	mov	r0, r6
 800294a:	47c0      	blx	r8
 800294c:	3001      	adds	r0, #1
 800294e:	d0a2      	beq.n	8002896 <_printf_i+0x13a>
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	079b      	lsls	r3, r3, #30
 8002954:	d507      	bpl.n	8002966 <_printf_i+0x20a>
 8002956:	2500      	movs	r5, #0
 8002958:	f104 0919 	add.w	r9, r4, #25
 800295c:	68e3      	ldr	r3, [r4, #12]
 800295e:	9a03      	ldr	r2, [sp, #12]
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	429d      	cmp	r5, r3
 8002964:	db05      	blt.n	8002972 <_printf_i+0x216>
 8002966:	68e0      	ldr	r0, [r4, #12]
 8002968:	9b03      	ldr	r3, [sp, #12]
 800296a:	4298      	cmp	r0, r3
 800296c:	bfb8      	it	lt
 800296e:	4618      	movlt	r0, r3
 8002970:	e793      	b.n	800289a <_printf_i+0x13e>
 8002972:	2301      	movs	r3, #1
 8002974:	464a      	mov	r2, r9
 8002976:	4639      	mov	r1, r7
 8002978:	4630      	mov	r0, r6
 800297a:	47c0      	blx	r8
 800297c:	3001      	adds	r0, #1
 800297e:	d08a      	beq.n	8002896 <_printf_i+0x13a>
 8002980:	3501      	adds	r5, #1
 8002982:	e7eb      	b.n	800295c <_printf_i+0x200>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1a7      	bne.n	80028d8 <_printf_i+0x17c>
 8002988:	780b      	ldrb	r3, [r1, #0]
 800298a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800298e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002992:	e765      	b.n	8002860 <_printf_i+0x104>
 8002994:	08002cdc 	.word	0x08002cdc
 8002998:	08002ccb 	.word	0x08002ccb

0800299c <_sbrk_r>:
 800299c:	b538      	push	{r3, r4, r5, lr}
 800299e:	2300      	movs	r3, #0
 80029a0:	4c05      	ldr	r4, [pc, #20]	; (80029b8 <_sbrk_r+0x1c>)
 80029a2:	4605      	mov	r5, r0
 80029a4:	4608      	mov	r0, r1
 80029a6:	6023      	str	r3, [r4, #0]
 80029a8:	f7fe ffea 	bl	8001980 <_sbrk>
 80029ac:	1c43      	adds	r3, r0, #1
 80029ae:	d102      	bne.n	80029b6 <_sbrk_r+0x1a>
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	b103      	cbz	r3, 80029b6 <_sbrk_r+0x1a>
 80029b4:	602b      	str	r3, [r5, #0]
 80029b6:	bd38      	pop	{r3, r4, r5, pc}
 80029b8:	200002a0 	.word	0x200002a0

080029bc <__sread>:
 80029bc:	b510      	push	{r4, lr}
 80029be:	460c      	mov	r4, r1
 80029c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029c4:	f000 f8fc 	bl	8002bc0 <_read_r>
 80029c8:	2800      	cmp	r0, #0
 80029ca:	bfab      	itete	ge
 80029cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80029ce:	89a3      	ldrhlt	r3, [r4, #12]
 80029d0:	181b      	addge	r3, r3, r0
 80029d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80029d6:	bfac      	ite	ge
 80029d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80029da:	81a3      	strhlt	r3, [r4, #12]
 80029dc:	bd10      	pop	{r4, pc}

080029de <__swrite>:
 80029de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029e2:	461f      	mov	r7, r3
 80029e4:	898b      	ldrh	r3, [r1, #12]
 80029e6:	4605      	mov	r5, r0
 80029e8:	05db      	lsls	r3, r3, #23
 80029ea:	460c      	mov	r4, r1
 80029ec:	4616      	mov	r6, r2
 80029ee:	d505      	bpl.n	80029fc <__swrite+0x1e>
 80029f0:	2302      	movs	r3, #2
 80029f2:	2200      	movs	r2, #0
 80029f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029f8:	f000 f874 	bl	8002ae4 <_lseek_r>
 80029fc:	89a3      	ldrh	r3, [r4, #12]
 80029fe:	4632      	mov	r2, r6
 8002a00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a04:	81a3      	strh	r3, [r4, #12]
 8002a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a12:	f000 b823 	b.w	8002a5c <_write_r>

08002a16 <__sseek>:
 8002a16:	b510      	push	{r4, lr}
 8002a18:	460c      	mov	r4, r1
 8002a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a1e:	f000 f861 	bl	8002ae4 <_lseek_r>
 8002a22:	1c43      	adds	r3, r0, #1
 8002a24:	89a3      	ldrh	r3, [r4, #12]
 8002a26:	bf15      	itete	ne
 8002a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8002a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002a32:	81a3      	strheq	r3, [r4, #12]
 8002a34:	bf18      	it	ne
 8002a36:	81a3      	strhne	r3, [r4, #12]
 8002a38:	bd10      	pop	{r4, pc}

08002a3a <__sclose>:
 8002a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a3e:	f000 b81f 	b.w	8002a80 <_close_r>

08002a42 <__ascii_wctomb>:
 8002a42:	b149      	cbz	r1, 8002a58 <__ascii_wctomb+0x16>
 8002a44:	2aff      	cmp	r2, #255	; 0xff
 8002a46:	bf8b      	itete	hi
 8002a48:	238a      	movhi	r3, #138	; 0x8a
 8002a4a:	700a      	strbls	r2, [r1, #0]
 8002a4c:	6003      	strhi	r3, [r0, #0]
 8002a4e:	2001      	movls	r0, #1
 8002a50:	bf88      	it	hi
 8002a52:	f04f 30ff 	movhi.w	r0, #4294967295
 8002a56:	4770      	bx	lr
 8002a58:	4608      	mov	r0, r1
 8002a5a:	4770      	bx	lr

08002a5c <_write_r>:
 8002a5c:	b538      	push	{r3, r4, r5, lr}
 8002a5e:	4605      	mov	r5, r0
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	2200      	movs	r2, #0
 8002a66:	4c05      	ldr	r4, [pc, #20]	; (8002a7c <_write_r+0x20>)
 8002a68:	6022      	str	r2, [r4, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f7fe fb26 	bl	80010bc <_write>
 8002a70:	1c43      	adds	r3, r0, #1
 8002a72:	d102      	bne.n	8002a7a <_write_r+0x1e>
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	b103      	cbz	r3, 8002a7a <_write_r+0x1e>
 8002a78:	602b      	str	r3, [r5, #0]
 8002a7a:	bd38      	pop	{r3, r4, r5, pc}
 8002a7c:	200002a0 	.word	0x200002a0

08002a80 <_close_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	2300      	movs	r3, #0
 8002a84:	4c05      	ldr	r4, [pc, #20]	; (8002a9c <_close_r+0x1c>)
 8002a86:	4605      	mov	r5, r0
 8002a88:	4608      	mov	r0, r1
 8002a8a:	6023      	str	r3, [r4, #0]
 8002a8c:	f7fe ff92 	bl	80019b4 <_close>
 8002a90:	1c43      	adds	r3, r0, #1
 8002a92:	d102      	bne.n	8002a9a <_close_r+0x1a>
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	b103      	cbz	r3, 8002a9a <_close_r+0x1a>
 8002a98:	602b      	str	r3, [r5, #0]
 8002a9a:	bd38      	pop	{r3, r4, r5, pc}
 8002a9c:	200002a0 	.word	0x200002a0

08002aa0 <_fstat_r>:
 8002aa0:	b538      	push	{r3, r4, r5, lr}
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	4c06      	ldr	r4, [pc, #24]	; (8002ac0 <_fstat_r+0x20>)
 8002aa6:	4605      	mov	r5, r0
 8002aa8:	4608      	mov	r0, r1
 8002aaa:	4611      	mov	r1, r2
 8002aac:	6023      	str	r3, [r4, #0]
 8002aae:	f7fe ff84 	bl	80019ba <_fstat>
 8002ab2:	1c43      	adds	r3, r0, #1
 8002ab4:	d102      	bne.n	8002abc <_fstat_r+0x1c>
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	b103      	cbz	r3, 8002abc <_fstat_r+0x1c>
 8002aba:	602b      	str	r3, [r5, #0]
 8002abc:	bd38      	pop	{r3, r4, r5, pc}
 8002abe:	bf00      	nop
 8002ac0:	200002a0 	.word	0x200002a0

08002ac4 <_isatty_r>:
 8002ac4:	b538      	push	{r3, r4, r5, lr}
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	4c05      	ldr	r4, [pc, #20]	; (8002ae0 <_isatty_r+0x1c>)
 8002aca:	4605      	mov	r5, r0
 8002acc:	4608      	mov	r0, r1
 8002ace:	6023      	str	r3, [r4, #0]
 8002ad0:	f7fe ff78 	bl	80019c4 <_isatty>
 8002ad4:	1c43      	adds	r3, r0, #1
 8002ad6:	d102      	bne.n	8002ade <_isatty_r+0x1a>
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	b103      	cbz	r3, 8002ade <_isatty_r+0x1a>
 8002adc:	602b      	str	r3, [r5, #0]
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
 8002ae0:	200002a0 	.word	0x200002a0

08002ae4 <_lseek_r>:
 8002ae4:	b538      	push	{r3, r4, r5, lr}
 8002ae6:	4605      	mov	r5, r0
 8002ae8:	4608      	mov	r0, r1
 8002aea:	4611      	mov	r1, r2
 8002aec:	2200      	movs	r2, #0
 8002aee:	4c05      	ldr	r4, [pc, #20]	; (8002b04 <_lseek_r+0x20>)
 8002af0:	6022      	str	r2, [r4, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	f7fe ff68 	bl	80019c8 <_lseek>
 8002af8:	1c43      	adds	r3, r0, #1
 8002afa:	d102      	bne.n	8002b02 <_lseek_r+0x1e>
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	b103      	cbz	r3, 8002b02 <_lseek_r+0x1e>
 8002b00:	602b      	str	r3, [r5, #0]
 8002b02:	bd38      	pop	{r3, r4, r5, pc}
 8002b04:	200002a0 	.word	0x200002a0

08002b08 <memchr>:
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	b2c9      	uxtb	r1, r1
 8002b0c:	4402      	add	r2, r0
 8002b0e:	4290      	cmp	r0, r2
 8002b10:	4603      	mov	r3, r0
 8002b12:	d101      	bne.n	8002b18 <memchr+0x10>
 8002b14:	2000      	movs	r0, #0
 8002b16:	bd10      	pop	{r4, pc}
 8002b18:	781c      	ldrb	r4, [r3, #0]
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	428c      	cmp	r4, r1
 8002b1e:	d1f6      	bne.n	8002b0e <memchr+0x6>
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd10      	pop	{r4, pc}

08002b24 <memcpy>:
 8002b24:	b510      	push	{r4, lr}
 8002b26:	1e43      	subs	r3, r0, #1
 8002b28:	440a      	add	r2, r1
 8002b2a:	4291      	cmp	r1, r2
 8002b2c:	d100      	bne.n	8002b30 <memcpy+0xc>
 8002b2e:	bd10      	pop	{r4, pc}
 8002b30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b38:	e7f7      	b.n	8002b2a <memcpy+0x6>

08002b3a <memmove>:
 8002b3a:	4288      	cmp	r0, r1
 8002b3c:	b510      	push	{r4, lr}
 8002b3e:	eb01 0302 	add.w	r3, r1, r2
 8002b42:	d803      	bhi.n	8002b4c <memmove+0x12>
 8002b44:	1e42      	subs	r2, r0, #1
 8002b46:	4299      	cmp	r1, r3
 8002b48:	d10c      	bne.n	8002b64 <memmove+0x2a>
 8002b4a:	bd10      	pop	{r4, pc}
 8002b4c:	4298      	cmp	r0, r3
 8002b4e:	d2f9      	bcs.n	8002b44 <memmove+0xa>
 8002b50:	1881      	adds	r1, r0, r2
 8002b52:	1ad2      	subs	r2, r2, r3
 8002b54:	42d3      	cmn	r3, r2
 8002b56:	d100      	bne.n	8002b5a <memmove+0x20>
 8002b58:	bd10      	pop	{r4, pc}
 8002b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b5e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002b62:	e7f7      	b.n	8002b54 <memmove+0x1a>
 8002b64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b68:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002b6c:	e7eb      	b.n	8002b46 <memmove+0xc>

08002b6e <__malloc_lock>:
 8002b6e:	4770      	bx	lr

08002b70 <__malloc_unlock>:
 8002b70:	4770      	bx	lr

08002b72 <_realloc_r>:
 8002b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b74:	4607      	mov	r7, r0
 8002b76:	4614      	mov	r4, r2
 8002b78:	460e      	mov	r6, r1
 8002b7a:	b921      	cbnz	r1, 8002b86 <_realloc_r+0x14>
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b82:	f7ff bbc5 	b.w	8002310 <_malloc_r>
 8002b86:	b922      	cbnz	r2, 8002b92 <_realloc_r+0x20>
 8002b88:	f7ff fb76 	bl	8002278 <_free_r>
 8002b8c:	4625      	mov	r5, r4
 8002b8e:	4628      	mov	r0, r5
 8002b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b92:	f000 f827 	bl	8002be4 <_malloc_usable_size_r>
 8002b96:	4284      	cmp	r4, r0
 8002b98:	d90f      	bls.n	8002bba <_realloc_r+0x48>
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	4638      	mov	r0, r7
 8002b9e:	f7ff fbb7 	bl	8002310 <_malloc_r>
 8002ba2:	4605      	mov	r5, r0
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d0f2      	beq.n	8002b8e <_realloc_r+0x1c>
 8002ba8:	4631      	mov	r1, r6
 8002baa:	4622      	mov	r2, r4
 8002bac:	f7ff ffba 	bl	8002b24 <memcpy>
 8002bb0:	4631      	mov	r1, r6
 8002bb2:	4638      	mov	r0, r7
 8002bb4:	f7ff fb60 	bl	8002278 <_free_r>
 8002bb8:	e7e9      	b.n	8002b8e <_realloc_r+0x1c>
 8002bba:	4635      	mov	r5, r6
 8002bbc:	e7e7      	b.n	8002b8e <_realloc_r+0x1c>
	...

08002bc0 <_read_r>:
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	4605      	mov	r5, r0
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	2200      	movs	r2, #0
 8002bca:	4c05      	ldr	r4, [pc, #20]	; (8002be0 <_read_r+0x20>)
 8002bcc:	6022      	str	r2, [r4, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f7fe fec8 	bl	8001964 <_read>
 8002bd4:	1c43      	adds	r3, r0, #1
 8002bd6:	d102      	bne.n	8002bde <_read_r+0x1e>
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	b103      	cbz	r3, 8002bde <_read_r+0x1e>
 8002bdc:	602b      	str	r3, [r5, #0]
 8002bde:	bd38      	pop	{r3, r4, r5, pc}
 8002be0:	200002a0 	.word	0x200002a0

08002be4 <_malloc_usable_size_r>:
 8002be4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002be8:	2800      	cmp	r0, #0
 8002bea:	f1a0 0004 	sub.w	r0, r0, #4
 8002bee:	bfbc      	itt	lt
 8002bf0:	580b      	ldrlt	r3, [r1, r0]
 8002bf2:	18c0      	addlt	r0, r0, r3
 8002bf4:	4770      	bx	lr
	...

08002bf8 <_init>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr

08002c04 <_fini>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr
